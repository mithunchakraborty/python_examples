<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

<title>Создание с помощью Django и React современного веб-приложения для управления данными клиентов в Ubuntu 18.04 | DigitalOcean</title>

<meta name="description" content="Автор выбрал организацию Open Sourcing Mental Illness Ltd для получения пожертвований в рамках программы Write for DOnations. Для подключения к Интернету и просмотра сайтов…">

<link rel="apple-touch-icon" sizes="180x180" href="/assets/community/apple-icon-180x180-4b5ac7f80f7cb483dde5afeb99c279301c50ec3670129c73ce568f1b465354be.png" />
<link rel="apple-touch-icon" sizes="152x152" href="/assets/community/apple-icon-152x152-ff64fd3242c24284fefdaec8d6d85c68f98744142d58b950f7ec67cbf03251d7.png" />
<link rel="apple-touch-icon" sizes="144x144" href="/assets/community/apple-icon-144x144-3018401d3d675917b06ded0482cdf53a7c3558b4dc7b6b8de21a485a8da27dfe.png" />
<link rel="apple-touch-icon" sizes="120x120" href="/assets/community/apple-icon-120x120-052cdf68a3af8b01c3fd0d46ed35f8f089c10c690109d20e7b186f0159391863.png" />
<link rel="apple-touch-icon" sizes="114x114" href="/assets/community/apple-icon-114x114-8d862033fc61d86a60b4bdbbbab284da399da714089995ce7efc249f36409517.png" />
<link rel="apple-touch-icon" sizes="76x76" href="/assets/community/apple-icon-76x76-d7c1877f2224ca127b591f65d16635fa7472e7b2cd0e1fe7e7dc8b74d03dd874.png" />
<link rel="apple-touch-icon" sizes="72x72" href="/assets/community/apple-icon-72x72-2d888cc13ddb01fb0d786a0c8567c0a2909eaeb86901da715099b6b88a36b46a.png" />
<link rel="apple-touch-icon" sizes="60x60" href="/assets/community/apple-icon-60x60-01be5b392df60249f168b8b2eed5c928c63aa43ac398c7180cd219c5acdd1e70.png" />
<link rel="apple-touch-icon" sizes="57x57" href="/assets/community/apple-icon-57x57-d060d0fd30794efd579d9edc283917e0a65adfd366e151d9a5cfd8fd7d07cb43.png" />

<link rel="icon" type="image/png" sizes="192x192"  href="/assets/community/android-icon-192x192-4d13e6664f412f6904a78be76d626004bcbbd59671f6c755919628134003c2a8.png" />
<link rel="icon" type="image/png" sizes="32x32" href="/assets/community/favicon-32x32-e377577c425642ab495296dfec040ec903e36ffc4cd7a0a4281e84597891a774.png" />
<link rel="icon" type="image/png" sizes="96x96" href="/assets/community/favicon-96x96-967f34b6716bb3cffebefe1fa53206d38d60c72635e826ec5d172c58fb4ab5a9.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/assets/community/favicon-16x16-ce9c1eb6d969d5b2ec276ae4b715756aa0e63106f33dc53a836687fdfee49ecd.png" />

<meta name="msapplication-TileImage" content="/assets/community/ms-icon-144x144-3018401d3d675917b06ded0482cdf53a7c3558b4dc7b6b8de21a485a8da27dfe.png" />
<meta name="msapplication-TileColor" content="#0069ff" />
<meta name="theme-color" content="#0069ff" />

<meta name="og:title" content="Создание с помощью Django и React современного веб-приложения для управления данными клиентов в Ubuntu 18.04 | DigitalOcean">
<meta name="og:description" content="Автор выбрал организацию Open Sourcing Mental Illness Ltd для получения пожертвований в рамках программы Write for DOnations. Для подключения к Интернету и просмотра сайтов…">
<meta name="og:site_name" content="DigitalOcean">
<meta name="og:type" content="article">
<meta name="og:image" content="https://www.digitalocean.com/assets/community/illustrations/DigitalOcean_Community-e00e73a18df20667c3117725e727f3ade330204dff619ad8153050ded7341627.jpg">

<meta name="twitter:site" content="DigitalOcean">
<meta name="twitter:title" content="Создание с помощью Django и React современного веб-приложения для управления данными клиентов в Ubuntu 18.04 | DigitalOcean">
<meta name="twitter:description" content="Автор выбрал организацию Open Sourcing Mental Illness Ltd для получения пожертвований в рамках программы Write for DOnations. Для подключения к Интернету и просмотра сайтов…">
<meta name="twitter:creator" content="DigitalOcean">
<meta name="twitter:card" content="photo" />
<meta name="twitter:url" content="https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru"/>
<meta name="twitter:image" content="https://www.digitalocean.com/assets/community/illustrations/DigitalOcean_Community-e00e73a18df20667c3117725e727f3ade330204dff619ad8153050ded7341627.jpg">

  <link rel='canonical' href='https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru'>

  <link rel='amphtml' href='https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru.amp'>

        <link rel="alternate" hreflang="en" href="https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04" />
      <link rel="alternate" hreflang="es" href="https://www.digitalocean.com/community/tutorials/como-crear-una-aplicacion-web-moderna-para-gestionar-la-informacion-de-clientes-con-django-y-react-on-ubuntu-18-04-es" />
      <link rel="alternate" hreflang="pt" href="https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-pt" />
      <link rel="alternate" hreflang="ru" href="https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru" />


    <link rel="preconnect" href="https://digitalocean.cdn.prismic.io">
    <link rel="preconnect" href="https://hello.myfonts.net">
    <link rel="stylesheet" media="all" href="/assets/community/application-0e23052b3b9781f2b1888d923afe794b0fa336f5cd9316d255b0efd0e2e5d59f.css" />

    
    <meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="0+fM3kkfnLtb3eyBvD4kzxcF+/6FdV0mEVgWTSY7AtvSmAESq3062dDVfalEvTxGlAm69X9XEJ+AMlYgLZW79A==" />
    <script src="/assets/community/prerequisites-d767b66db7c8ba7d47a922cfce41c73d40601b3586be6f96107d5cd25cc752b8.js"></script>
    <script>
//<![CDATA[

  window.cookieDomain = '.digitalocean.com';

//]]>
</script><script defer src="https://assets.digitalocean.com/cookieConsent/cookieConsent.js"></script>
<script>
  (function () {
    document.addEventListener("DOMContentLoaded", function () {
      var css = document.getElementById("cookie-consent-css");

      if (css) { return; }

      css = document.createElement("link");
      css.id = "cookie-consent-css";
      css.rel = "stylesheet";
      css.href = "https://assets.digitalocean.com/cookieConsent/cookieConsent.css";
      document.head.insertBefore(css, document.head.childNodes[ document.head.childNodes.length - 1 ].nextSibling);
    }, false);
  })();
</script>

    <script type="text/javascript">
  if(window.analytics=window.analytics||[],window.analytics.included)window.console&&console.error&&console.error("analytics.js included twice");else{window.analytics.included=!0,window.analytics.methods=["identify","group","track","page","pageview","alias","ready","on","once","off","trackLink","trackForm","trackClick","trackSubmit"],window.analytics.factory=function(a){return function(){var n=Array.prototype.slice.call(arguments);return n.unshift(a),window.analytics.push(n),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var key=window.analytics.methods[i];window.analytics[key]=window.analytics.factory(key)}window.analytics.load=function(a){var n=document.createElement("script");n.type="text/javascript",n.async=!0,n.src=("https:"===document.location.protocol?"https://":"http://")+"cdn.segment.com/analytics.js/v1/"+a+"/analytics.min.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(n,t)},window.analytics.SNIPPET_VERSION="2.0.9",window.analytics.load("puo3uv968t")}
  window.analytics.page();
</script>

<!-- Google Tag Manager -->
<script>
  (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    '//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
  })(window,document,'script','dataLayer','GTM-KHWBBT');
</script>
<!-- End Google Tag Manager -->

<script src="/assets/community/internalCookies-d87064530395e23ede521d41535044c0b89092bef82bbb545bd1c8f731908bad.js"></script>

      <script src="https://cdn.polyfill.io/v2/polyfill.min.js"></script>

    <link rel="alternate" type="application/rss+xml" title="RSS" href="/community/tutorials/feed">
    <script>
      window.comApp = {
        prefix: '/community',
        svgIconPath: 'https://www.digitalocean.com/assets/community/icon-sprite-a36f54b391966bc94e4a1e4467047db73568edf98e549f4bc919b952f5272560.svg',
        railsEnv: 'production',
        rootUrl: 'https://www.digitalocean.com/community',
        algolia_application_id: '6ZHEUVKJ88',
        algolia_api_key: 'c5470567eae7fa1177d43222e18ba086'
      };
    </script>
    
    <script>
  window.Prism = window.Prism || {};
  window.Prism.manual = true;
</script>
 
    <script src="/assets/community/application-a0d212c12c4e5e81449c969264ddea33ae75ab7c6b2c173ded35a7b7d67d1bb9.js"></script>
  </head>
  <body class="feature-filter-bar feature-upvotes tutorials-controller tutorial-single" data-env="production" data-prefix="/community" data-user-id="" data-facebook-app-id="694818843983011"   data-completed-tutorial-id="" data-tutorial-id="3346" data-js="tutorial"
  data-upvote="null"
  data-flagged=""
>
    

    <div class='outside_viewport'>
        <div id="contents-modal" class="modal fade mini-modal" style="display: none;">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h1>Contents</h1>
          <button class="close-button icon icon-close-light" data-dismiss="modal" aria-label="close"></button>
        </div>
        <div class="modal-body">
          <div class="table-of-contents-modal"></div>
        </div>
      </div>
    </div>
  </div>
  <div id="share-modal" class="modal fade mini-modal" style="display: none;">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1>Share</h1>
        <button type="button" class="close-button icon icon-close-light" aria-label="close" data-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div class="social-sharing social-sharing-container">
          <ul class="top ">
            <li class="shareBtn" id="sbTwitter">
              <a href="http://twitter.com/share?text=%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5%20%D1%81%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E%20Django%20%D0%B8%20React%20%D1%81%D0%BE%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE%20%D0%B2%D0%B5%D0%B1-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%BB%D1%8F%20%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8%20%D0%BA%D0%BB%D0%B8%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20Ubuntu%2018.04&amp;url=https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru?utm_content=how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru&amp;utm_medium=community&amp;utm_source=twshare" class="share-icon share-popup" title="Share on Twitter" target="_blank">
                <span class="sIcon icon-bird"></span>
              </a>
              <a href="http://twitter.com/share?text=%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5%20%D1%81%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E%20Django%20%D0%B8%20React%20%D1%81%D0%BE%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE%20%D0%B2%D0%B5%D0%B1-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%BB%D1%8F%20%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8%20%D0%BA%D0%BB%D0%B8%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20Ubuntu%2018.04&amp;url=https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru?utm_content=how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru&amp;utm_medium=community&amp;utm_source=twshare" class="share-link share-popup" title="Share on Twitter" target="_blank">
                Twitter
              </a>
            </li>
            <li class="shareBtn" id="sbFacebook">
              <a class="share-icon share-popup" href="https://www.facebook.com/sharer/sharer.php?u=https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru?utm_content=how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru&amp;utm_medium=community&amp;utm_source=fbshare" title="Share on Facebook" target="_blank">
                <span class="sIcon icon-facebook-B"></span>
              </a>
              <a class="share-link share-popup" href="https://www.facebook.com/sharer/sharer.php?u=https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru?utm_content=how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru&amp;utm_medium=community&amp;utm_source=fbshare" title="Share on Facebook" target="_blank">
                Facebook
              </a>
            </li>
            <li class="shareBtn" id="sbYC">
              <a href="https://news.ycombinator.com/submitlink?t=%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5%20%D1%81%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E%20Django%20%D0%B8%20React%20%D1%81%D0%BE%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE%20%D0%B2%D0%B5%D0%B1-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%BB%D1%8F%20%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8%20%D0%BA%D0%BB%D0%B8%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20Ubuntu%2018.04&amp;u=https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru?utm_content=how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru&amp;utm_medium=community&amp;utm_source=hnshare" class="share-icon share-popup" target="_blank" title="Submit to Hacker News">
                <span class="sIcon icon-hacker-news"></span>
              </a>
              <a href="https://news.ycombinator.com/submitlink?t=%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5%20%D1%81%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E%20Django%20%D0%B8%20React%20%D1%81%D0%BE%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE%20%D0%B2%D0%B5%D0%B1-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%BB%D1%8F%20%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8%20%D0%BA%D0%BB%D0%B8%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20Ubuntu%2018.04&amp;u=https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru?utm_content=how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru&amp;utm_medium=community&amp;utm_source=hnshare" class="share-link share-popup" target="_blank" title="Submit to Hacker News">
                Hacker News
              </a>
            </li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>

  <div class="table-of-contents">
    <div data-js="tableOfContentsDesktop"></div>
  </div>
  <!-- algolia universal search -->
<input type="hidden" id="q-universal-search" value="" />



<div id="share-modal" class="modal fade mini-modal" style="display: none;">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1>Share</h1>
        <button type="button" class="close-button icon icon-close-light" aria-label="close" data-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div class="social-sharing social-sharing-container">
          <ul class="bottom ">
            <li class="shareBtn" id="sbTwitter">
              <a href="http://twitter.com/share?text=%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5%20%D1%81%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E%20Django%20%D0%B8%20React%20%D1%81%D0%BE%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE%20%D0%B2%D0%B5%D0%B1-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%BB%D1%8F%20%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8%20%D0%BA%D0%BB%D0%B8%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20Ubuntu%2018.04&amp;url=https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru?utm_content=how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru&amp;utm_medium=community&amp;utm_source=twshare" class="share-icon share-popup" title="Share on Twitter" target="_blank">
                <span class="sIcon icon-bird"></span>
              </a>
              <a href="http://twitter.com/share?text=%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5%20%D1%81%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E%20Django%20%D0%B8%20React%20%D1%81%D0%BE%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE%20%D0%B2%D0%B5%D0%B1-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%BB%D1%8F%20%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8%20%D0%BA%D0%BB%D0%B8%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20Ubuntu%2018.04&amp;url=https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru?utm_content=how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru&amp;utm_medium=community&amp;utm_source=twshare" class="share-link share-popup" title="Share on Twitter" target="_blank">
                Twitter
              </a>
            </li>
            <li class="shareBtn" id="sbFacebook">
              <a class="share-icon share-popup" href="https://www.facebook.com/sharer/sharer.php?u=https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru?utm_content=how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru&amp;utm_medium=community&amp;utm_source=fbshare" title="Share on Facebook" target="_blank">
                <span class="sIcon icon-facebook-B"></span>
              </a>
              <a class="share-link share-popup" href="https://www.facebook.com/sharer/sharer.php?u=https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru?utm_content=how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru&amp;utm_medium=community&amp;utm_source=fbshare" title="Share on Facebook" target="_blank">
                Facebook
              </a>
            </li>
            <li class="shareBtn" id="sbYC">
              <a href="https://news.ycombinator.com/submitlink?t=%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5%20%D1%81%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E%20Django%20%D0%B8%20React%20%D1%81%D0%BE%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE%20%D0%B2%D0%B5%D0%B1-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%BB%D1%8F%20%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8%20%D0%BA%D0%BB%D0%B8%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20Ubuntu%2018.04&amp;u=https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru?utm_content=how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru&amp;utm_medium=community&amp;utm_source=hnshare" class="share-icon share-popup" target="_blank" title="Submit to Hacker News">
                <span class="sIcon icon-hacker-news"></span>
              </a>
              <a href="https://news.ycombinator.com/submitlink?t=%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5%20%D1%81%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E%20Django%20%D0%B8%20React%20%D1%81%D0%BE%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE%20%D0%B2%D0%B5%D0%B1-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%BB%D1%8F%20%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8%20%D0%BA%D0%BB%D0%B8%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20Ubuntu%2018.04&amp;u=https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru?utm_content=how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru&amp;utm_medium=community&amp;utm_source=hnshare" class="share-link share-popup" target="_blank" title="Submit to Hacker News">
                Hacker News
              </a>
            </li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>



      
    </div>

      
      
<div style="display: none;">
  <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <symbol id="navbar-logo" xmlns="http://www.w3.org/2000/svg"> <title>DigitalOcean home</title> <g fill="currentColor" fill-rule="evenodd"> <path d="M14.4942 29v-5.5674c5.9572 0 10.5633-5.8478 8.2892-12.059-.8425-2.3006-2.693-4.1355-5.0126-4.9706-6.262-2.2534-12.1564 2.3135-12.1573 8.2207 0 0-.0006.0014-.0014.0014H0C0 5.2123 9.1687-2.1167 19.1138.9624c4.3459 1.3457 7.7993 4.7708 9.1561 9.081C31.3742 19.9068 23.985 29 14.4942 29"></path> <path d="M14.507 23.4468H8.9103v-5.549s.0005-.0011.0011-.0011h5.5949c.0006 0 .0009.0006.0009.0006v5.5495M8.9093 27.7118H4.6105l-.0012-.0012v-4.2638h4.3009v4.2638l-.0009.0012M4.6125 23.4468H1.0088c-.0015 0-.0026-.0012-.0026-.0012v-3.5724s.0011-.0025.0026-.0025h3.601c.0015 0 .0027.0011.0027.0011v3.575M43.2806 9.6357h1.649c1.8346 0 3.345.358 4.49 1.0647 1.2714.7603 1.9164 2.2069 1.9164 4.2991 0 2.1554-.6465 3.6671-1.9207 4.4942h-.0008c-1.0971.7196-2.5981 1.0846-4.462 1.0846h-1.6719V9.6357zm8.324-1.0736c-1.6598-1.142-3.7252-1.721-6.1387-1.721h-5.2537V23.373h5.2537c2.4074 0 4.4737-.6113 6.1407-1.8157.907-.6382 1.6197-1.5304 2.1185-2.651.4962-1.1144.7479-2.4288.7479-3.9067 0-1.4605-.2517-2.758-.7482-3.857-.4988-1.104-1.212-1.972-2.1202-2.5804zM58.1303 6.6376c-.5051 0-.9403.1777-1.2906.5254-.3546.335-.5346.7597-.5346 1.2618 0 .501.1791.9322.532 1.2825.3529.35.788.528 1.2932.528.5042 0 .9394-.178 1.2928-.528.3535-.3508.5324-.7821.5324-1.2825 0-.5015-.18-.926-.5324-1.2592-.3534-.3503-.7886-.528-1.2928-.528M56.6247 23.3729h2.9538V11.7294h-2.9538zM69.5321 19.5787c-.5162.5814-1.1793.8635-2.0264.8635-.8471 0-1.5064-.282-2.015-.863-.5065-.5777-.7637-1.3439-.7637-2.2773 0-.9479.2572-1.7238.764-2.3058.502-.576 1.1796-.8683 2.0147-.8683.8465 0 1.5096.284 2.0262.8695.5142.582.7751 1.3573.7751 2.3046 0 .9328-.2609 1.6988-.7749 2.2768zm.775-6.8767c-.8908-.7858-1.8858-1.2444-2.9614-1.2444-1.6305 0-2.9859.5598-4.0276 1.662-1.0555 1.0932-1.5907 2.5006-1.5907 4.1823 0 1.644.5269 3.0464 1.568 4.1709 1.0498 1.088 2.4123 1.6396 4.0503 1.6396 1.139 0 2.1182-.3144 2.9157-.9356v.268c0 .9662-.2608 1.7176-.7751 2.234-.5137.5154-1.226.7764-2.1173.7764-1.3637 0-2.2183-.5314-3.2589-1.9262l-2.0115 1.917.0542.0754c.4346.605 1.1 1.197 1.9785 1.7594.8787.5603 1.9832.8447 3.2832.8447 1.7536 0 3.1726-.5363 4.2172-1.5933 1.0506-1.0628 1.5835-2.486 1.5835-4.2286V11.7294H70.307v.9726zM75.7434 23.3729h2.9541V11.7294h-2.9541zM77.249 6.6376c-.5052 0-.94.1777-1.2906.5254-.3547.335-.5344.7597-.5344 1.2618 0 .501.1789.9322.532 1.2825.353.35.7878.528 1.293.528.5045 0 .9396-.178 1.2928-.528.3535-.3508.5323-.7821.5323-1.2825 0-.5015-.1797-.926-.5323-1.2592-.3532-.3503-.7883-.528-1.2929-.528M85.1724 8.5831h-2.9082v3.1463h-1.6888v2.6702h1.6888v4.8365c0 1.5134.3047 2.5964.9064 3.2181.6031.6247 1.6741.9414 3.1831.9414.48 0 .963-.0156 1.4354-.0463l.133-.0088v-2.6683l-1.013.0526c-.7033 0-1.1728-.1226-1.3961-.3637-.226-.245-.3406-.7636-.3406-1.5404v-4.421h2.7497v-2.6703h-2.7497V8.583M101.7735 23.3729h2.9544V6.8412h-2.9544zM134.5728 19.2094c-.5286.5874-1.0693 1.0966-1.4855 1.3613v.0005c-.4085.2599-.924.3918-1.532.3918-.8703 0-1.5703-.3144-2.1405-.9621-.567-.644-.8545-1.4716-.8545-2.4613s.2838-1.8162.8436-2.4556c.5625-.6434 1.2588-.9562 2.1285-.9562.9515 0 1.9548.5869 2.8145 1.5947l1.9525-1.8568c-1.273-1.6433-2.897-2.4081-4.8352-2.4081-1.622 0-3.028.5862-4.1788 1.7411-1.1446 1.147-1.7251 2.6074-1.7251 4.3409 0 1.7335.58 3.1977 1.7234 4.352 1.1447 1.1557 2.5514 1.7417 4.1805 1.7417 2.139 0 3.8651-.9158 5.029-2.5935l-1.9204-1.8304M140.2405 16.0973c.1422-.5567.401-1.0207.7714-1.381.4005-.3906.9214-.5885 1.5489-.5885.716 0 1.2702.2019 1.6474.6014.3495.3696.5467.8296.588 1.368h-4.5557zm6.4569-2.7414c-.4191-.5788-.9896-1.0448-1.6965-1.3854-.7047-.3404-1.526-.513-2.441-.513-1.6489 0-2.9982.6037-4.0113 1.7946-.9836 1.182-1.4818 2.651-1.4818 4.3665 0 1.7648.547 3.2253 1.6254 4.341 1.0727 1.1105 2.5083 1.6737 4.267 1.6737 1.992 0 3.627-.799 4.8587-2.3752l.0666-.0847-1.9273-1.837c-.1789.2139-.4317.4561-.6628.6722-.2918.273-.5659.4842-.8588.6289-.4415.218-.9369.3255-1.4907.3255-.8187 0-1.4964-.2388-2.0147-.71-.4847-.4403-.768-1.0345-.843-1.7683h7.8265l.0264-1.0693c0-.7569-.1038-1.4862-.3088-2.1677a6.312 6.312 0 0 0-.934-1.8918zM152.797 18.9234c.3352-.2318.8085-.3483 1.4073-.3483.7112 0 1.4654.1413 2.2426.421v1.1421c-.6421.592-1.4996.8922-2.5499.8922-.5114 0-.909-.1126-1.1822-.3355-.2683-.218-.3985-.4955-.3985-.847 0-.3994.1571-.7022.4808-.9245zm5.2452-6.3229h-.0003c-.8952-.758-2.1328-1.143-3.678-1.143-.9829 0-1.902.2144-2.7336.6324-.7691.387-1.5245 1.0275-2.0043 1.8662l.0298.0358 1.8917 1.796c.7791-1.2322 1.6454-1.66 2.7941-1.66.6172 0 1.1298.1643 1.5234.4881.3916.3216.5819.7304.5819 1.249v.5652c-.7324-.221-1.4629-.333-2.1738-.333-1.47 0-2.6663.3432-3.555 1.0193-.9.6852-1.3562 1.665-1.3562 2.9125 0 1.094.3847 1.9829 1.1461 2.6433.7677.6372 1.7275.961 2.8524.961 1.1246 0 2.177-.4495 3.132-1.2191v.9587h2.9089v-7.4852c0-1.4173-.4572-2.523-1.3591-3.2872zM170.7656 12.8285c-.8227-.9092-1.9791-1.371-3.4371-1.371-1.172 0-2.1236.3338-2.8357.9926v-.7207h-2.897v11.6435h2.954v-6.4215c0-.8823.2119-1.5828.6293-2.0826.4162-.4987.989-.741 1.75-.741.6691 0 1.1765.2167 1.5506.662.3759.4474.5662 1.0638.5662 1.8335v6.7496H172v-6.7496c0-1.6127-.415-2.889-1.2344-3.7948M92.8158 18.9234c.3351-.2318.8087-.3483 1.4075-.3483.7112 0 1.4652.1413 2.2426.421v1.1421c-.6421.592-1.4998.8922-2.5502.8922-.5114 0-.9087-.1126-1.1819-.3355-.2683-.218-.3988-.4955-.3988-.847 0-.3994.1574-.7022.4808-.9245zm5.2451-6.3229h-.0003c-.8952-.758-2.1328-1.143-3.6776-1.143-.983 0-1.902.2144-2.7337.6324-.7694.387-1.5247 1.0275-2.0043 1.8662l.0295.0358 1.8917 1.796c.7792-1.2322 1.6458-1.66 2.7941-1.66.6172 0 1.1298.1643 1.5234.4881.3916.3216.5822.7304.5822 1.249v.5652c-.7327-.221-1.4631-.333-2.174-.333-1.47 0-2.6664.3432-3.555 1.0193-.8999.6852-1.3562 1.665-1.3562 2.9125 0 1.094.3847 1.9829 1.1463 2.6433.7677.6372 1.7272.961 2.8524.961 1.1246 0 2.1766-.4495 3.1318-1.2191v.9587H99.42v-7.4852c0-1.4173-.457-2.523-1.359-3.2872zM115.4464 9.5808c-3.0682 0-5.5645 2.4755-5.5645 5.5188s2.4963 5.5188 5.5645 5.5188c3.0682 0 5.5645-2.4755 5.5645-5.5188s-2.4963-5.5188-5.5645-5.5188zm0 14.0408c-4.7383 0-8.5928-3.8228-8.5928-8.522 0-4.6994 3.8545-8.5223 8.5928-8.5223 4.738 0 8.5925 3.8229 8.5925 8.5223 0 4.6992-3.8545 8.522-8.5925 8.522z"></path> </g> </symbol>
    <symbol id="navbar-community_logo" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 532.2 99.8" fill="currentColor"> <path class="st0" d="M98.5,23c15.5,0,27.7,12.1,27.7,28.2c0,16.1-12.3,28.1-27.7,28.1c-15.6,0-27.7-11.9-27.7-28.1 C70.8,35.1,82.9,23,98.5,23z M98.5,67.9c8.7,0,14.9-7,14.9-16.8c0-9.8-6.2-16.8-14.9-16.8c-8.8,0-15,7-15,16.8 C83.5,60.9,89.7,67.9,98.5,67.9z"/> <path class="st0" d="M166.8,45.9c0-7-3.5-11.6-9.9-11.6c-7.2,0-11.1,5.3-11.1,13.1V78h-12.5V24.3h12.3V29c2.4-2.8,7-6,13.9-6 c7.3,0,12.2,3.1,15,7c4.4-4.9,10-7,16.8-7c14.4,0,21.4,8.5,21.4,23.8V78h-12.5V45.9c0-7-3.5-11.6-9.9-11.6 c-7.2,0-11.2,5.3-11.2,13.1V78h-12.4V45.9z"/> <path class="st0" d="M255.5,45.9c0-7-3.5-11.6-9.9-11.6c-7.2,0-11.1,5.3-11.1,13.1V78h-12.5V24.3h12.3V29c2.4-2.8,7-6,13.9-6 c7.3,0,12.2,3.1,15,7c4.4-4.9,10-7,16.8-7c14.4,0,21.4,8.5,21.4,23.8V78h-12.5V45.9c0-7-3.5-11.6-9.9-11.6 c-7.2,0-11.2,5.3-11.2,13.1V78h-12.4V45.9z"/> <path class="st0" d="M322.5,56.4c0,7,3.6,11.6,10.1,11.6c7.2,0,11.2-5.6,11.2-13.5V24.3h12.5V78h-12.3v-4.4 c-3.4,3.7-8.1,5.6-13.9,5.6c-11.9,0-20.1-8.4-20.1-23.7V24.3h12.5V56.4z"/> <path class="st0" d="M378.2,78h-12.5V24.3h12.3v4.4c2.7-3.1,7.7-5.7,13.9-5.7c13.1,0,21.3,8.5,21.3,23.8V78h-12.5V46.8 c0-7.5-3.7-12.5-10.6-12.5c-7.8,0-11.8,5.6-11.8,14V78z"/> <path class="st0" d="M427.8,0.2c4.4,0,7.9,3.4,7.9,7.8s-3.5,7.9-7.9,7.9c-4.4,0-7.9-3.5-7.9-7.9S423.4,0.2,427.8,0.2z M421.4,24.3 h12.5V78h-12.5V24.3z"/> <path class="st0" d="M446.7,59.1V35.5h-6.5V24.3h6.5v-15H459v15h12.2v11.2H459v21.7c0,7.8,1.8,9.8,8.8,9.8c1.2,0,4.1-0.2,4.1-0.2 v11.2c0,0-2.4,0.2-6.7,0.2C451.2,78.1,446.7,72.7,446.7,59.1z"/> <path class="st0" d="M497.3,78.7l-21.3-54.4h14.2l14,38.8l14.2-38.8h13.6l-24.1,60.2c-3.7,9.4-7.2,15.3-21.3,15.3 c-2.5,0-4.8-0.1-4.8-0.1V88c0,0,1.5,0.1,2.8,0.1c7.6,0,9.8-2.3,11.8-7.8L497.3,78.7z"/> <path class="st0" d="M62.4,55.9c-5.3,7-12.2,11.4-22.1,11.4c-15.6,0-27-11.7-27-27.5c0-16.1,11.4-27.8,26.5-27.8 c10,0,16.8,4.8,21.3,11.3l8.4-8.8C63.1,5.7,53.3,0,39.7,0C17.1,0,0,15.9,0,39.8c0,23.4,17.1,39.4,40.1,39.4c13.1,0,22-4.9,28.6-12.2 L62.4,55.9z"/> </symbol>
    <symbol id="navbar-control_panel_icon" viewBox="0 0 45 45" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M19.6875 23.4862C19.6885 23.9722 19.4965 24.4388 19.1537 24.7833C18.8109 25.1279 18.3454 25.3222 17.8594 25.3237H3.23438C2.99366 25.3232 2.75539 25.2753 2.53321 25.1827C2.31102 25.09 2.10927 24.9545 1.93949 24.7839C1.7697 24.6132 1.63522 24.4108 1.54373 24.1881C1.45223 23.9655 1.40552 23.727 1.40626 23.4862V3.25498C1.40577 3.01417 1.45271 2.77562 1.54441 2.55295C1.63611 2.33028 1.77077 2.12785 1.9407 1.95722C2.11063 1.7866 2.31251 1.65111 2.5348 1.5585C2.75709 1.46589 2.99545 1.41797 3.23626 1.41748L17.8613 1.44186C18.347 1.44384 18.812 1.63843 19.1544 1.98292C19.4968 2.32741 19.6885 2.79366 19.6875 3.27936V23.4862Z" stroke="#0069FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/> <path d="M43.5863 12.27C43.5828 12.7516 43.3883 13.212 43.0456 13.5503C42.7028 13.8885 42.2397 14.0768 41.7582 14.0738H27.1332C26.8947 14.0755 26.6582 14.0302 26.4372 13.9405C26.2162 13.8507 26.015 13.7183 25.8453 13.5508C25.6755 13.3833 25.5404 13.1839 25.4477 12.9642C25.355 12.7444 25.3065 12.5085 25.3051 12.27V3.24565C25.308 2.76461 25.5019 2.30442 25.8439 1.96621C26.186 1.62799 26.6484 1.43941 27.1294 1.4419L41.7544 1.41753C42.2365 1.41403 42.7002 1.60205 43.0437 1.94027C43.3872 2.27849 43.5823 2.73924 43.5863 3.22128V12.27Z" stroke="#0069FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/> <path d="M19.6875 41.7956C19.686 42.0347 19.6375 42.2712 19.5446 42.4915C19.4518 42.7118 19.3164 42.9117 19.1463 43.0797C18.9762 43.2477 18.7747 43.3806 18.5532 43.4707C18.3318 43.5609 18.0947 43.6065 17.8556 43.605L3.23063 43.5806C2.74908 43.5826 2.28644 43.3934 1.94436 43.0545C1.60228 42.7155 1.40873 42.2547 1.40625 41.7731V32.7563C1.40748 32.5175 1.45575 32.2813 1.54831 32.0612C1.64087 31.8412 1.7759 31.6415 1.94569 31.4736C2.11547 31.3057 2.31667 31.173 2.53779 31.0829C2.75892 30.9929 2.99562 30.9473 3.23438 30.9488H17.8594C18.3414 30.9463 18.8047 31.1352 19.1475 31.4742C19.4903 31.8131 19.6845 32.2742 19.6875 32.7563V41.7956Z" stroke="#0069FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/> <path d="M27.1349 43.605C26.894 43.6045 26.6555 43.5565 26.433 43.4638C26.2106 43.3711 26.0087 43.2354 25.8387 43.0646C25.6688 42.8937 25.5341 42.6911 25.4426 42.4682C25.351 42.2453 25.3042 42.0066 25.3049 41.7656V21.5381C25.3042 21.2973 25.3509 21.0587 25.4424 20.8359C25.5338 20.6132 25.6683 20.4106 25.8381 20.2398C26.0078 20.069 26.2095 19.9333 26.4317 19.8405C26.6539 19.7476 26.8923 19.6995 27.1331 19.6987H41.7581C41.9989 19.6995 42.2372 19.7476 42.4594 19.8405C42.6816 19.9333 42.8833 20.069 43.0531 20.2398C43.2228 20.4106 43.3573 20.6132 43.4488 20.8359C43.5402 21.0587 43.5869 21.2973 43.5862 21.5381V41.7412C43.5872 42.2271 43.3955 42.6935 43.0532 43.0383C42.7109 43.3831 42.2458 43.5781 41.7599 43.5806L27.1349 43.605Z" stroke="#0069FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/> </symbol>
    <symbol id="navbar-community_icon" viewBox="0 0 45 45" fill="none" xmlns="http://www.w3.org/2000/svg"> <g clip-path="url(#clip0)"> <path d="M12.6562 10.5469C12.6562 9.85155 12.8624 9.17184 13.2487 8.5937C13.635 8.01556 14.1841 7.56495 14.8265 7.29886C15.4689 7.03277 16.1758 6.96315 16.8577 7.0988C17.5397 7.23445 18.1661 7.56929 18.6578 8.06095C19.1495 8.55262 19.4843 9.17905 19.6199 9.86101C19.7556 10.543 19.686 11.2499 19.4199 11.8922C19.1538 12.5346 18.7032 13.0837 18.1251 13.47C17.5469 13.8563 16.8672 14.0625 16.1719 14.0625" stroke="#0069FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/> <path d="M16.1719 18.2812C16.0328 18.2812 15.8969 18.3225 15.7812 18.3997C15.6656 18.477 15.5755 18.5868 15.5223 18.7153C15.4691 18.8438 15.4551 18.9852 15.4823 19.1215C15.5094 19.2579 15.5764 19.3832 15.6747 19.4816C15.773 19.5799 15.8983 19.6469 16.0347 19.674C16.1711 19.7011 16.3125 19.6872 16.4409 19.634C16.5694 19.5808 16.6792 19.4906 16.7565 19.375C16.8338 19.2594 16.875 19.1234 16.875 18.9844C16.875 18.7979 16.8009 18.6191 16.6691 18.4872C16.5372 18.3553 16.3584 18.2812 16.1719 18.2812Z" stroke="#0069FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/> <path d="M32.3438 4.21875V12.6562" stroke="#0069FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/> <path d="M29.5312 1.40625C30.2772 1.40625 30.9925 1.70257 31.52 2.23001C32.0474 2.75746 32.3438 3.47283 32.3438 4.21875" stroke="#0069FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/> <path d="M4.21875 1.40625H29.5312" stroke="#0069FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/> <path d="M1.40625 4.21875C1.40625 3.47283 1.70257 2.75746 2.23001 2.23001C2.75746 1.70257 3.47283 1.40625 4.21875 1.40625" stroke="#0069FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/> <path d="M1.40625 23.9062V4.21875" stroke="#0069FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/> <path d="M4.21875 26.7188C3.47283 26.7187 2.75746 26.4224 2.23001 25.895C1.70257 25.3675 1.40625 24.6522 1.40625 23.9062" stroke="#0069FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/> <path d="M9.84375 26.7188H4.21875" stroke="#0069FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/> <path d="M9.84375 35.1562V26.7188" stroke="#0069FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/> <path d="M15.4688 30.9375L9.84375 35.1562" stroke="#0069FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/> <path d="M43.5938 35.1562H37.9688V43.5938L29.5312 35.1562H21.0938V18.2812H43.5938V35.1562Z" stroke="#0069FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/> <path d="M32.3438 23.9062V29.5312" stroke="#0069FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/> </g> <defs> <clipPath id="clip0"> <rect width="45" height="45" fill="white"/> </clipPath> </defs> </symbol>
    <symbol id="navbar-search" viewBox="0 0 16 16" fill="currentColor"><path fill-rule="evenodd" d="M15.7 13.3l-3.81-3.83A5.93 5.93 0 0 0 13 6c0-3.31-2.69-6-6-6S1 2.69 1 6s2.69 6 6 6c1.3 0 2.48-.41 3.47-1.11l3.83 3.81c.19.2.45.3.7.3.25 0 .52-.09.7-.3a.996.996 0 0 0 0-1.41v.01zM7 10.7c-2.59 0-4.7-2.11-4.7-4.7 0-2.59 2.11-4.7 4.7-4.7 2.59 0 4.7 2.11 4.7 4.7 0 2.59-2.11 4.7-4.7 4.7z"></path></symbol>
    <symbol id="navbar-logomark" viewBox="65.2 173.5 180 180" fill="currentColor"><path d="M155.2,351.7v-34.2c36.2,0,64.3-35.9,50.4-74c-5.1-14.1-16.4-25.4-30.5-30.5c-38.1-13.8-74,14.2-74,50.4l0,0H67c0-57.7,55.8-102.7,116.3-83.8c26.4,8.3,47.5,29.3,55.7,55.7C257.9,295.9,213,351.7,155.2,351.7z"/> <polygon points="155.3,317.6 121.3,317.6 121.3,283.6 121.3,283.6 155.3,283.6 155.3,283.6"/> <polygon points="121.3,343.8 95.1,343.8 95.1,343.8 95.1,317.6 121.3,317.6"/> <path d="M95.1,317.6H73.2l0,0v-21.9l0,0h21.9l0,0V317.6z"/></symbol>
    <symbol id="navbar-write4do" viewBox="0 0 30 30" fill="none" stroke="currentColor"> <path d="M16.3063 17.67L11.6663 18.3338L12.3288 13.6925L24.2613 1.76002C24.7887 1.23257 25.5041 0.936249 26.25 0.936249C26.6194 0.936249 26.9851 1.009 27.3263 1.15034C27.6675 1.29168 27.9776 1.49885 28.2388 1.76002C28.4999 2.02118 28.7071 2.33123 28.8484 2.67246C28.9898 3.01369 29.0625 3.37942 29.0625 3.74877C29.0625 4.11811 28.9898 4.48384 28.8484 4.82507C28.7071 5.1663 28.4999 5.47635 28.2388 5.73752L16.3063 17.67Z" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/> <path d="M22.935 3.08624L26.9125 7.06374"  stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/> <path d="M23.4375 17.8125V27.1875C23.4375 27.6848 23.24 28.1617 22.8883 28.5133C22.5367 28.865 22.0598 29.0625 21.5625 29.0625H2.8125C2.31522 29.0625 1.83831 28.865 1.48667 28.5133C1.13504 28.1617 0.9375 27.6848 0.9375 27.1875V8.4375C0.9375 7.94022 1.13504 7.46331 1.48667 7.11167C1.83831 6.76004 2.31522 6.5625 2.8125 6.5625H12.1875" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/> </symbol>
    <symbol id="navbar-meetups" viewBox="0 0 30 30" fill="none" stroke="currentColor"> <path d="M27.1901 4.6875H2.81506C1.77953 4.6875 0.940063 5.52697 0.940063 6.5625V27.1875C0.940063 28.223 1.77953 29.0625 2.81506 29.0625H27.1901C28.2256 29.0625 29.0651 28.223 29.0651 27.1875V6.5625C29.0651 5.52697 28.2256 4.6875 27.1901 4.6875Z" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/> <path d="M0.940063 12.1875H29.0651" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/> <path d="M8.44006 7.5V0.9375" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/> <path d="M21.5651 7.5V0.9375" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/> </symbol>
    <symbol id="navbar-hacktoberfest" viewBox="0 0 30 30" fill="none" stroke="currentColor"> <path d="M19.2063 24.9918L16.5714 22.3569V14.4854L13.986 17.0708V23.5755L12.5615 25L11.1371 23.5591V8.44175L10.7419 8.04652L8.93042 9.8662L8 8.94401L11.9358 5.00823L11.944 5.01647L12.1005 5.16468L13.9778 7.04199V13.8431L16.5632 11.2577V8.42528L15.2705 7.12433L17.3948 5L19.4286 7.03376V20.9572L20.4249 21.9535L21.6352 20.7431L22.5492 21.6571L19.2063 24.9918Z" fill="currentcolor"/> <rect x="0.75" y="0.75" width="28.5" height="28.5" rx="2.25" stroke-width="1.5" stroke="currentColor"/> </symbol>
    <symbol id="navbar-build" viewBox="0 0 16 16" fill="none" stroke="currentColor"> <path d="M1.5 14.5C1.23478 14.5 0.98043 14.3946 0.792893 14.2071C0.605357 14.0196 0.5 13.7652 0.5 13.5V2.57667C0.500879 2.29139 0.614596 2.01804 0.81632 1.81632C1.01804 1.6146 1.29139 1.50088 1.57667 1.5H14.4287C14.7125 1.50088 14.9845 1.61403 15.1852 1.81476C15.386 2.01548 15.4991 2.28747 15.5 2.57133V13.4233C15.4991 13.7086 15.3854 13.982 15.1837 14.1837C14.982 14.3854 14.7086 14.4991 14.4233 14.5H1.5Z" stroke-linecap="round" stroke-linejoin="round"/> <path d="M15.5 4.5H0.5" stroke-linecap="round" stroke-linejoin="round"/> <path d="M11 7.5L13 9.5L11 11.5" stroke-linecap="round" stroke-linejoin="round"/> <path d="M5 7.5L3 9.5L5 11.5" stroke-linecap="round" stroke-linejoin="round"/> <path d="M9 7.5L7 11.5" stroke-linecap="round" stroke-linejoin="round"/> </symbol>
  </svg>
</div>

<nav class="navbar" role="navigation" aria-label="Navigation" data-js="global-navbar">
  <ul role="menubar" class="utility">
    <li role="banner" data-flex="grow" data-show="always" data-js="global-navbar-banner">
    </li>
    <li role="menuitem">
      <a href="/products/">Products</a>
    </li>
    <li role="menuitem">
      <a href="/pricing/">Pricing</a>
    </li>
    <li role="menuitem" aria-haspopup="true" tabindex="0">
      <span class="expander">Docs</span>
      <div role="menuitem" class="mini" aria-expanded="false">
        <ul role="menu">
          <li role="menuitem">
            <a href="/docs/">Product Docs</a>
          </li>
          <li role="menuitem">
            <a href="https://developers.digitalocean.com/documentation/">API Docs</a>
          </li>
        </ul>
      </div>
    </li>
      <li role="menuitem" aria-haspopup="true" tabindex="0">
      <span class="expander">Sign in</span>
        <div role="menuitem" class="mini" aria-expanded="false">
          <header>Sign in to</header>
          <ul role="menu">
            <li role="menuitem">
              <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                <use xlink:href="#navbar-community_icon"></use>
              </svg>
              <a id="log-in" href="/community/auth/digitalocean">Community</a>
            </li>
            <li role="menuitem">
              <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                <use xlink:href="#navbar-control_panel_icon"></use>
              </svg>
              <a href="https://cloud.digitalocean.com/registrations/new">Control Panel</a>
            </li>
          </ul>
        </div>
      </li>
  </ul>

  <ul role="menubar" class="primary">
    <li role="menuitem" data-show="always" class="logo-square">
      <a href="https://www.digitalocean.com/">
        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" shape-rendering="auto">
          <use xlink:href="#navbar-logomark"></use>
        </svg>
      </a>
    </li>
    <li role="menuitem" data-show="always">
      <a title="DigitalOcean Community Home" class="home" href="/community">
        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="120px" height="24px"
             shape-rendering="auto">
          <use xlink:href="#navbar-community_logo"></use>
        </svg>
</a>    </li>
    <li role="menuitem">
      <a data-activatable="true" href="/community/tutorials">Tutorials</a>
    </li>
    <li role="menuitem">
      <a data-activatable="true" href="/community/questions">Questions</a>
    </li>
    <li role="menuitem" aria-haspopup="true" class="mega_parent" tabindex="0">
      <span class="expander">Get Involved</span>
      <div role="menuitem" class="mega" aria-expanded="false">
        <div class="section column">
          <header>Participate</header>
          <ul role="menu">
            <li role="menuitem">
              <a class="with_image" href="/community/pages/write-for-digitalocean">
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                  <use xlink:href="#navbar-write4do"></use>
                </svg>
                <p>
                  <strong>Write for DigitalOcean</strong>
                  You get paid, we donate to tech non-profits.
                </p>
</a>            </li>
            <li role="menuitem">
              <a href="https://www.meetup.com/pro/digitalocean" class="with_image">
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                  <use xlink:href="#navbar-meetups"></use>
                </svg>
                <p>
                  <strong>DigitalOcean Meetups</strong>
                  Find and meet other developers in your city.
                </p>
              </a>
            </li>
            <li role="menuitem">
              <a href="https://hacktoberfest.digitalocean.com" class="with_image">
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                  <use xlink:href="#navbar-hacktoberfest"></use>
                </svg>
                <p>
                  <strong>Hacktoberfest</strong>
                  Contribute to Open Source
                </p>
              </a>
            </li>
          </ul>
        </div>
        <div class="section column">
          <header>
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
              <use xlink:href="#navbar-build"></use>
            </svg>
            Build with DigitalOcean
          </header>
          <ul role="menu" class="indent">
            <li role="menuitem">
              <a title="Community-built tools and integrations that use the DigitalOcean API" href="/community/tools">Community Tools and Integrations</a>
            </li>
            <li role="menuitem">
              <a href="https://www.digitalocean.com/hatch/" title="Build your startup on DigitalOcean.">
                Hatch Startup Program
              </a>
            </li>
            <li role="menuitem">
              <a href="https://marketplace.digitalocean.com/vendors/"
                 title="List your open source One-Click Application in the DigitalOcean Marketplace">
                Marketplace Partner Program
              </a>
            </li>
            <li role="menuitem">
              <a href="https://www.digitalocean.com/partners/solutions-partners/"
                 title="Easily deploy & modernize your clients’ infrastructures with the Solutions Partner Program">
                Solutions Partner Program
              </a>
            </li>
            <li role="menuitem">
              <a href="https://www.digitalocean.com/droplets-for-demos/"
                 title="DigitalOcean credits to fund research for conference and meetup presentations">
                Presentation Grants
              </a>
            </li>
            <li role="menuitem">
              <a href="https://github.com/digitalocean"
                 title="View all the open-source projects that DigitalOcean have on GitHub">
                DigitalOcean on GitHub
              </a>
            </li>
          </ul>
        </div>
      </div>
    </li>
    <li role="menuitem" data-show="mobile" data-flex="grow" class="right">
      <a href="javascript:void(0);" data-js="modal_toggle" data-body-class="mobile_nav_expanded">
        <span class="icon-menu-thin"></span>
      </a>
    </li>
    <li role="menuitem" data-flex="grow">
      <button id="q" class="search_button">
          <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" shape-rendering="auto"
               width="14px" height="14px">
            <use xlink:href="#navbar-search"></use>
          </svg>
          Search DigitalOcean
          <kbd>/</kbd>
      </button>
    </li>
    <li role="menuitem">
      <a class="button blue-button small-button" href="/community/auth/digitalocean?display=sessionless+register+button">Sign Up</a>
    </li>
  </ul>

  <div class="mobile_nav_bg" data-js="modal_toggle"></div>
  <div class="mobile_nav">
    <a data-dismiss='modal' aria-label="close" href="javascript:void(0);" data-js="modal_toggle"><span class="icon-close"></span></a>
    <div class="mobile_nav_content">
      <header>Community</header>
      <ul role="menu">
        <li role="menuitem">
          <a data-activatable="true" href="/community/tutorials">Tutorials</a>
        </li>
        <li role="menuitem">
          <a data-activatable="true" href="/community/questions">Questions</a>
        </li>
        <li role="menuitem">
          <a href="https://www.meetup.com/pro/digitalocean">Meetups</a>
        </li>
        <li role="menuitem">
          <a href="/community/pages/write-for-digitalocean">Write for us</a>
        </li>
        <li role="menuitem">
          <a href="https://hacktoberfest.digitalocean.com">Hacktoberfest</a>
        </li>
        <li role="menuitem">
          <a href="/community/tools">Tools</a>
        </li>
      </ul>
      <header>Products</header>
      <ul role="menu">
        <li role="menuitem">
          <a href="https://www.digitalocean.com/">Homepage</a>
        </li>
        <li role="menuitem">
          <a href="https://www.digitalocean.com/pricing">Pricing</a>
        </li>
        <li role="menuitem">
          <a href="https://www.digitalocean.com/products">Product Overview</a>
        </li>
        <li role="menuitem">
          <a href="https://marketplace.digitalocean.com/">Marketplace</a>
        </li>
      </ul>
      <header>Customers</header>
      <ul role="menu">
        <li role="menuitem">
          <a href="https://cloud.digitalocean.com/login">Control panel</a>
        </li>
        <li role="menuitem">
          <a href="https://www.digitalocean.com/docs/">Documentation</a>
        </li>
        <li role="menuitem">
          <a href="https://www.digitalocean.com/company/contact/#support">Contact Support</a>
        </li>
        <li role="menuitem">
          <a href="https://www.digitalocean.com/company/contact/sales/">Contact Sales</a>
        </li>
      </ul>

      <ul role="menu">
        <li role="menuitem" class="mobile-log-in">
            <a id="log-in" href="/community/auth/digitalocean">Sign In</a>
        </li>
      </ul>
    </div>
  </div>
</nav>

<header>
  <div class="legacy-header ">
    <div class="flash-container">
      
    </div>

    <div class="wrapper">
      
    </div>
  </div>
</header>



      

      <div class='wrapper layout-wrapper'>

        












<div class="section-content section-content-growable content Tutorial-content">
  

  <div class="container tutorial-header">
    

      <div class="featured-items-right-bar">
        <h3>Related</h3>
          <a href="/community/tutorials/how-to-set-up-jupyter-notebook-with-python-3-on-ubuntu-20-04-and-connect-via-ssh-tunneling-ru">
            <div class="featured-item-regular" data-js="tutorial">
                  Настройка Jupyter Notebook с помощью Python 3 в Ubuntu 20.04 и подключение через туннель SSH
                  <span class="featured-item-category">
                    <img width="14" height="14" alt="Tutorial" src="/assets/community/tutorials/featured-item-tutorial-icon-bce4d5cc06536a907c48f6663a93392cdf6c5f30677b48439d1164c89fb71ad1.png" />
                    Tutorial
                  </span>
                </div>
</a>          <a href="/community/tutorials/how-to-install-webmin-on-ubuntu-20-04-ru">
            <div class="featured-item-regular" data-js="tutorial">
                  Установка Webmin в Ubuntu 20.04
                  <span class="featured-item-category">
                    <img width="14" height="14" alt="Tutorial" src="/assets/community/tutorials/featured-item-tutorial-icon-bce4d5cc06536a907c48f6663a93392cdf6c5f30677b48439d1164c89fb71ad1.png" />
                    Tutorial
                  </span>
                </div>
</a>      </div>


    

    <h4 class="eyebrow">Tutorial</h4>
    <h1 class="content-title Tutorial-header">Создание с помощью Django и React современного веб-приложения для управления данными клиентов в Ubuntu 18.04</h1>
    <span class="meta-section tags">
  <a class="tag" href="/community/tags/django">Django</a><a class="tag" href="/community/tags/ubuntu-18-04">Ubuntu 18.04</a><a class="tag" href="/community/tags/react">React</a>
</span>


    <div class="tutorial-authors-translations">
      <div class="tutorial-authors">
        <div class="component-collaborators-container">
  <ul class="component-collaborators-content">
        <li class="collaborator-byline-avatar">
          <a href="/community/users/mrnerd">
            <img alt="mrnerd" class="avatar avatar-large" src="https://secure.gravatar.com/avatar/5f105543436ef874c1e9d02694eb8ffd?secure=true&d=identicon" width="80" height="80" />
</a>        </li>

    <li class="collaborators-byline-data">
        <p class="names">By <a href="/community/users/mrnerd">Ahmed Bouchefra</a></p>

      <span class="meta-section date-views">
  <span class="meta-section timestamp"><span class="tutorial-date-text">Posted</span><span class="tutorial-date">January  7, 2020</span></span>
  <span class="meta-section pageviews"><span class="icon icon-eye v-mid"></span><span class="views-count v-mid">10.1k</span><span class="sr-only"> views</span></span>
</span>

    </li>
  </ul>
</div>

      </div>

        <select name="translation_language" id="translation_language" autocomplete="off" class="large-chosen-dropdown"><option value="/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04">English</option>
<option value="/community/tutorials/como-crear-una-aplicacion-web-moderna-para-gestionar-la-informacion-de-clientes-con-django-y-react-on-ubuntu-18-04-es">Español</option>
<option value="/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-pt">Português</option>
<option selected="selected" value="/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru">Русский</option></select>
    </div>
  </div>

  




  <div class="content-body tutorial-content" data-growable-markdown>
    
    <p><em>Автор выбрал организацию <a href="https://www.brightfunds.org/organizations/open-sourcing-mental-illness-ltd">Open Sourcing Mental Illness Ltd</a> для получения пожертвований в рамках программы <a href="https://do.co/w4do-cta">Write for DOnations</a>.</em></p>

<h3 id="Введение">Введение</h3>

<p>Для подключения к Интернету и просмотра сайтов люди используют разные устройства. В связи с этим, приложения должны быть доступными из разных мест. Для традиционных сайтов часто достаточно иметь быстрый пользовательский интерфейс, однако для более сложных приложений обычно требуются другие методики и архитектуры. В ним относятся отдельные серверные и клиентские приложения REST, которые можно реализовать как клиентские веб-приложения, прогрессивные веб-приложения (PWA) или мобильные приложения.</p>

<p>Помимо прочего, для создания более сложных веб-приложений можно использовать следующие инструменты:</p>

<ul>
<li><a href="https://reactjs.org/">React</a>, система JavaScript, позволяющая разработчикам создавать веб-приложения и собственные клиентские приложения для серверных REST API.</li>
<li><a href="https://www.djangoproject.com/">Django</a>, бесплатная веб-система Python с открытым исходным кодом, соответствующая архитектурной схеме программного обеспечения <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"><em>контроллера отображения моделей (MVC)</em></a>.</li>
<li><a href="http://www.django-rest-framework.org/">Система Django REST</a>, представляющая собой мощный и гибкий набор инструментов для создания REST API в Django.</li>
</ul>

<p>В этом обучающем руководстве вы создадите современное веб-приложение с отдельными серверным и клиентским REST API, используя React, Django и систему Django REST. Используя React вместе с Django, вы сможете воспользоваться последними достижениями JavaScript и разработки клиентской части. Вместо создания приложения Django, использующего встроенный механизм шаблонов, вы используете React как библиотеку пользовательского интерфейса. Это позволяет воспользоваться преимуществами виртуальной объектной модели документов (DOM), декларативного подхода и компонентов, быстро обрабатывающих изменения данных.</p>

<p>Создаваемое веб-приложение будет хранить записи о клиентах в базе данных, и вы сможете использовать его как основу для приложения CRM. После завершения обучения вы научитесь создавать, читать, обновлять и удалять записи, используя интерфейс в стиле React с <a href="https://getbootstrap.com/">Bootstrap 4</a>.</p>

<h2 id="Предварительные-требования">Предварительные требования</h2>

<p>Для данного курса обучения вам потребуется следующее:</p>

<ul>
<li>Система с Ubuntu 18.04 для разработки.</li>
<li>Установленные на компьютере Python 3, <code>pip</code> и <code>venv</code> в соответствии с шагами 1 и 2 руководства <a href="https://www.digitalocean.com/community/tutorials/how-to-install-python-3-and-set-up-a-local-programming-environment-on-ubuntu-18-04">«Установка Python 3 и настройка локальной среды программирования в Ubuntu 18.04»</a>.</li>
<li>Установленные на компьютере Node.js версии 6+ и <code>npm</code> версии 5.2 или выше. Для их установки необходимо следовать указаниям документа <a href="https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-18-04#installing-using-a-ppa">«Установка Node.js в Ubuntu 18.04»</a> по установке с PPA.</li>
</ul>

<h2 id="Шаг-1-—-Создание-виртуальной-среды-python-и-установка-зависимостей">Шаг 1 — Создание виртуальной среды Python и установка зависимостей</h2>

<p>На этом шаге мы создадим виртуальную среду и установим требуемые зависимости для нашего приложения, в том числе Django, систему Django REST и заголовки <code>django-cors-headers</code>.</p>

<p>Наше приложение будет использовать два разных сервера разработки для Django и React. Они будут работать на разных портах и функционировать как два отдельных домена. В связи с этим нам потребуется <a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing"><em>совместное использование ресурсов между разными источниками (CORS)</em></a> для отправки запросов HTTP из React в Django без блокировки браузером.</p>

<p>Перейдите в каталог home и создайте виртуальную среду, используя модуль <code>venv</code> Python 3:</p>
<pre class="code-pre command prefixed"><code><ul class="prefixed"><li class="line" prefix="$">cd ~
</li><li class="line" prefix="$">python3 -m venv ./env
</li></ul></code></pre>
<p>Активируйте созданную виртуальную среду с помощью <code>source</code>:</p>
<pre class="code-pre command prefixed"><code><ul class="prefixed"><li class="line" prefix="$">source env/bin/activate
</li></ul></code></pre>
<p>Установите зависимости проекта с помощью <code>pip</code>. К ним будут относиться:</p>

<ul>
<li><strong>Django</strong>: веб-система для данного проекта.</li>
<li><strong>Система Django REST</strong>: стороннее приложение, создающее REST API с помощью Django.</li>
<li><strong><code>django-cors-headers</code></strong>: пакет для активации CORS.</li>
</ul>

<p>Установите систему Django:</p>
<pre class="code-pre custom_prefix prefixed"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">pip install django djangorestframework django-cors-headers
</li></ul></code></pre>
<p>После установки зависимостей проекта вы сможете создать проект Django и клиентскую часть React.</p>

<h2 id="Шаг-2-—-Создание-проекта-django">Шаг 2 — Создание проекта Django</h2>

<p>На этом шаге мы создадим проект Django, используя следующие команды и утилиты:</p>

<ul>
<li><p><strong><code>django-admin startproject project-name</code></strong>: <a href="https://docs.djangoproject.com/en/2.0/ref/contrib/admin/#"><code>django-admin</code></a>— утилита командной строки, используемая для выполнения задач с помощью Django. Команда <code>startproject</code> создает новый проект Django.</p></li>
<li><p><strong><code>python manage.py startapp myapp</code></strong>: <code>manage.py</code> — утилитарный сценарий, автоматически добавляемый в каждый проект Django. Он выполняет ряд административных задач, включая создание новых приложений, миграцию базы данных и локальное обслуживание проекта Django. Его команда <code>startapp</code> создает приложение Django внутри проекта Django. В Django термин приложение **описывает пакет Python, предоставляющий определенный набор функций проекта.</p></li>
</ul>

<p>Для начала создайте проект Django с помощью команды <code>django-admin startproject</code>. Назовем наш проект <code>djangoreactproject</code>:</p>
<pre class="code-pre custom_prefix prefixed"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">django-admin startproject <span class="highlight">djangoreactproject</span>
</li></ul></code></pre>
<p>Прежде чем продолжить, посмотрим структуру каталогов нашего проекта Django с помощью команды <code>tree</code>.</p>

<span class='note'><p>
<strong>Подсказка:</strong> <code>tree</code> — это полезная команда для просмотра структур файлов и каталогов из командной строки. Для установки вы можете использовать следующую команду:</p>
<pre class="code-pre command prefixed"><code><ul class="prefixed"><li class="line" prefix="$">sudo apt-get install tree
</li></ul></code></pre>
<p>Для использования перейдите в желаемый каталог с помощью команды <code>cd</code>, а затем введите команду <code>tree</code> или укажите путь к начальной точке команды <code>tree /home/sammy/sammys-project</code>.<br></p></span>

<p>Перейдите в папку проекта <code>djangoreactproject</code> в корневом каталоге проекта и запустите команду <code>tree</code>:</p>
<pre class="code-pre custom_prefix prefixed"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">cd ~/djangoreactproject
</li><li class="line" prefix="(env) sammy@ubuntu:$">tree
</li></ul></code></pre>
<p>Результат будет выглядеть следующим образом:</p>
<pre class="code-pre "><code><div class="secondary-code-label " title="Output">Output</div>├── djangoreactproject
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
└── manage.py
</code></pre>
<p>Папка <code>~/djangoreactproject</code> является корневым каталогом проекта. В этой папке содержится несколько файлов, важных для вашей работы:</p>

<ul>
<li><strong><code>manage.py</code></strong>: утилитарный сценарий, выполняющий ряд административных задач.</li>
<li><strong><code>settings.py</code></strong>: основной файл конфигурации проекта Django, где вы можете изменять настройки проекта. В число этих настроек входят переменные, такие как <code>INSTALLED_APPS</code>, <a href="https://www.digitalocean.com/community/tutorials/understanding-lists-in-python-3">список</a> строк с обозначением приложений, активированных для вашего проекта. Более подробную информацию по доступным настройкам можно найти в <a href="https://docs.djangoproject.com/en/2.0/ref/settings/">документации по Django</a>.</li>
<li><strong><code>urls.py</code></strong>: этот файл содержит список шаблонов URL и связанных просмотров. В каждом шаблоне сопоставляются URL и функция, вызываемая для этого URL. Более подробную информацию об URL и представлениях можно найти в обучающем руководстве <a href="https://www.digitalocean.com/community/tutorials/how-to-create-django-views">«Создание представления Django»</a>.</li>
</ul>

<p>Первым шагом в работе с проектом будет настройка пакетов, установленных на предыдущем шаге, включая систему Django REST и пакет Django CORS. Для этого их нужно добавить в <code>settings.py</code>. Откройте файл с помощью <code>nano</code> или своего любимого редактора:</p>
<pre class="code-pre custom_prefix prefixed"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">nano ~/djangoreactproject/djangoreactproject/settings.py
</li></ul></code></pre>
<p>Перейдите в настройки <code>INSTALLED_APPS</code> и добавьте приложения <code>rest_framework</code> и <code>corsheaders</code> в нижнюю часть списка:</p>
<div class="code-label " title="~/djangoreactproject/djangoreactproject/settings.py">~/djangoreactproject/djangoreactproject/settings.py</div><pre class="code-pre "><code>...
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    <span class="highlight">'rest_framework',</span>
    <span class="highlight">'corsheaders'</span>
]
</code></pre>
<p>Затем добавьте промежуточный уровень <code>corsheaders.middleware.CorsMiddleware</code> из ранее установленного пакета CORS в параметр <code>MIDDLEWARE</code>. Этот параметр представляет собой перечень <em>промежуточных уровней. Промежуточный уровень — это класс Python,</em> который содержит код, выполняемый каждый раз, когда ваше веб-приложение обрабатывает запрос или отклик:</p>
<div class="code-label " title="~/djangoreactproject/djangoreactproject/settings.py">~/djangoreactproject/djangoreactproject/settings.py</div><pre class="code-pre "><code>...

MIDDLEWARE = [
...
'django.contrib.messages.middleware.MessageMiddleware',
'django.middleware.clickjacking.XFrameOptionsMiddleware',
<span class="highlight">'corsheaders.middleware.CorsMiddleware'</span>
]
</code></pre>
<p>Далее вы можете активировать CORS. Параметр <code>CORS_ORIGIN_ALLOW_ALL</code> указывает, нужно ли разрешать CORS для всех доменов, а <code>CORS_ORIGIN_WHITELIST</code> — это запись Python, содержащая перечень разрешенных URL. В нашем случае сервер разработки React будет работать по URL <code>http://localhost:3000</code>, и поэтому мы добавим новые параметры <code>CORS_ORIGIN_ALLOW_ALL = False</code> и <code>CORS_ORIGIN_WHITELIST('localhost:3000',)</code> в наш файл <code>settings.py</code>. Эти параметры можно добавить в любую часть файла:</p>
<div class="code-label " title="~/djangoreactproject/djangoreactproject/settings.py">~/djangoreactproject/djangoreactproject/settings.py</div><pre class="code-pre "><code>
...
<span class="highlight">CORS_ORIGIN_ALLOW_ALL = False</span>

<span class="highlight">CORS_ORIGIN_WHITELIST = (</span>
       <span class="highlight">'localhost:3000',</span>
<span class="highlight">)</span>
...
</code></pre>
<p>Дополнительные параметры конфигурации можно найти в <a href="https://github.com/ottoyiu/django-cors-headers/#configuration">документации по <code>django-cors-headers</code></a>.</p>

<p>После завершения работы сохраните файл и закройте редактор.</p>

<p>Находясь в каталоге <code>~/djangoreactproject</code>, создайте новое приложение Django под названием <code>customers</code>:</p>
<pre class="code-pre custom_prefix prefixed"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">python manage.py startapp <span class="highlight">customers</span>
</li></ul></code></pre>
<p>В нем будут содержаться <a href="https://www.digitalocean.com/community/tutorials/how-to-create-django-models">модели</a> и <a href="https://www.digitalocean.com/community/tutorials/how-to-create-django-views">представления</a> для управления клиентами. Модели определяют поля и схемы поведения данных нашего приложения, а представления позволяют приложению правильно обрабатывать веб-запросы и возвращать требуемые ответы.</p>

<p>Затем добавьте это приложение в список установленных приложений в файле проекта <code>settings.py</code>, чтобы Django распознавал его как часть проекта. Откройте файл <code>settings.py</code> еще раз:</p>
<pre class="code-pre custom_prefix prefixed"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">nano ~/djangoreactproject/djangoreactproject/settings.py
</li></ul></code></pre>
<p>Добавьте приложение <code>customers</code>:</p>
<div class="code-label " title="~/djangoreactproject/djangoreactproject/settings.py">~/djangoreactproject/djangoreactproject/settings.py</div><pre class="code-pre "><code>...
INSTALLED_APPS = [
    ...
    'rest_framework',
    'corsheaders'<span class="highlight">,</span>
    <span class="highlight">'customers'</span>
]
...
</code></pre>
<p>Затем выполните <em>миграцию</em> базы данных и запустите локальный сервер разработки. <a href="https://docs.djangoproject.com/en/2.0/topics/migrations/">Миграция</a> используется Django для записи изменений модели в схему базы данных. Изменения могут включать добавление поля, удаление модели и т. д. Более подробную информацию о моделях и миграции можно найти в документе <a href="https://www.digitalocean.com/community/tutorials/how-to-create-django-models">«Создание моделей Django»</a>.</p>

<p>Выполните миграцию базы данных:</p>
<pre class="code-pre custom_prefix prefixed"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">python manage.py migrate
</li></ul></code></pre>
<p>Запустите локальный сервер разработки:</p>
<pre class="code-pre custom_prefix prefixed"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">python manage.py runserver
</li></ul></code></pre>
<p>Вы увидите примерно следующий результат:</p>
<pre class="code-pre "><code><div class="secondary-code-label " title="Output">Output</div>Performing system checks...

System check identified no issues (0 silenced).
October 22, 2018 - 15:14:50
Django version 2.1.2, using settings 'djangoreactproject.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
</code></pre>
<p>Ваше веб-приложение будет работать с <code>http://127.0.0.1:8000</code>. Если вы откроете этот адрес в браузере, вы должны увидеть следующую страницу:</p>

<p><img src="https://assets.digitalocean.com/articles/django_react_1604/django_home.png" alt="Демонстрационная страница Django"></p>

<p>Теперь оставьте приложение работать и откройте новый терминал, чтобы продолжить разработку проекта.</p>

<h2 id="Шаг-3-—-Создание-клиентской-части-react">Шаг 3 — Создание клиентской части React</h2>

<p>В этом разделе мы создадим клиентское приложение нашего проекта с помощью React.</p>

<p>В React есть официальная утилита, позволяющая быстро генерировать проекты React без прямой настройки <a href="https://webpack.js.org/">Webpack</a>. Webpack — это компоновщик модулей, используемый для компоновки веб-ресурсов, таких как код JavaScript, стили CSS и изображения. Обычно перед использованием Webpack необходимо настроить различные параметры конфигурации, однако утилита <code>create-react-app</code> позволяет не работать с Webpack напрямую, если вы не захотите внести более детальные настройки. Для запуска <code>create-react-app</code> вы можете использовать инструмент <a href="https://github.com/zkat/npx">npx</a>, служащий для выполнения двоичных пакетов <code>npm</code>.</p>

<p>Переключитесь на второй терминал и убедитесь, что вы находитесь в каталоге проекта:</p>
<pre class="code-pre command prefixed second-environment"><code><ul class="prefixed"><li class="line" prefix="$">cd ~/djangoreactproject
</li></ul></code></pre>
<p>Создайте проект React под названием <code>frontend</code> с помощью <code>create-react-app</code> и <code>npx</code>:</p>
<pre class="code-pre command prefixed second-environment"><code><ul class="prefixed"><li class="line" prefix="$">npx create-react-app <span class="highlight">frontend</span>
</li></ul></code></pre>
<p>Воспользуйтесь навигацией по вашему приложению React и запустите сервер разработки:</p>
<pre class="code-pre command prefixed second-environment"><code><ul class="prefixed"><li class="line" prefix="$">cd ~/djangoreactproject/frontend
</li><li class="line" prefix="$">npm start
</li></ul></code></pre>
<p>Ваше приложение будет запускаться с <code>http://localhost:3000/</code>:</p>

<p><img src="https://assets.digitalocean.com/articles/django_react_1604/react_home.png" alt="Демонстрационная страница React"></p>

<p>Оставьте сервер разработки React работать и откройте другое окно терминала, чтобы продолжить.</p>

<p>Чтобы увидеть полную структуру каталогов проекта на этом этапе, перейдите в корневую папку root и снова запустите команду <code>tree</code>:</p>
<pre class="code-pre command prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="$">cd ~/djangoreactproject
</li><li class="line" prefix="$">tree
</li></ul></code></pre>
<p>Вы увидите следующую структуру:</p>
<pre class="code-pre  third-environment"><code><div class="secondary-code-label " title="Output">Output</div>├── customers
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── djangoreactproject
│   ├── __init__.py
│   ├── __pycache__
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── frontend
│   ├── package.json
│   ├── public
│   │   ├── favicon.ico
│   │   ├── index.html
│   │   └── manifest.json
│   ├── README.md
│   ├── src
│   │   ├── App.css
│   │   ├── App.js
│   │   ├── App.test.js
│   │   ├── index.css
│   │   ├── index.js
│   │   ├── logo.svg
│   │   └── registerServiceWorker.js
│   └── yarn.lock
└── manage.py
</code></pre>
<p>Наше приложение будет использовать Bootstrap 4 для стилизации интерфейса React, и поэтому мы добавим его в файл <code>frontend/src/App.css</code>, управляющий настройками CSS. Откройте файл:</p>
<pre class="code-pre command prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="$">nano ~/djangoreactproject/frontend/src/App.css
</li></ul></code></pre>
<p>Добавьте следующий элемент <a href="https://www.digitalocean.com/community/tutorials/how-to-import-modules-in-python-3#importing-modules"><em>import</em></a> в начало файла. Вы можете удалить содержание файла, хотя это не обязательно:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/App.css">~/djangoreactproject/frontend/src/App.css</div><pre class="code-pre "><code class="code-highlight language-css">@import  'https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css';
</code></pre>
<p>Здесь <code>@import</code> — это инструкция CSS, используемая для импорта правил стиля из других таблиц стилей.</p>

<p>Мы создали серверную и клиентскую часть приложения. Теперь мы создадим модель клиентов и добавим демонстрационные данные.</p>

<h2 id="Шаг-4-—-Создание-модели-клиентов-и-начального-набора-данных">Шаг 4 — Создание модели клиентов и начального набора данных</h2>

<p>После создания приложения Django и клиентской части React мы создадим модель клиентов, представляющую таблицу базы данных, где будет храниться информация о клиентах. Вам не потребуется SQL, поскольку Django <em>Object Relational Mapper (ORM)</em> будет обрабатывать операции базы данных посредством сопоставления классов и переменных Python с таблицами и столбцами SQL. Так Django ORM абстрагирует взаимодействия SQL с базой данных через интерфейс Python.</p>

<p>Запустите свою виртуальную среду еще раз:</p>
<pre class="code-pre command prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="$">cd ~
</li><li class="line" prefix="$">source env/bin/activate
</li></ul></code></pre>
<p>Перейдите в каталог <code>customers</code> и откройте <code>models.py</code>, файл Python, где хранятся модели вашего приложения:</p>
<pre class="code-pre custom_prefix prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">cd ~/djangoreactproject/customers/
</li><li class="line" prefix="(env) sammy@ubuntu:$">nano models.py
</li></ul></code></pre>
<p>Файл будет иметь следующее содержание:</p>
<div class="code-label " title="~/djangoreactproject/customers/models.py">~/djangoreactproject/customers/models.py</div><pre class="code-pre "><code class="code-highlight language-python">from django.db import models
# Create your models here.
</code></pre>
<p>API клиентской модели уже импортирован в файл из django.db с помощью выражения <code>import models</code>. Теперь вы добавите класс <code>Customer</code> как расширение <code>models.Model</code>. Каждая модель в Django представляет собой класс Python, являющийся расширением  <a href="https://docs.djangoproject.com/en/2.0/ref/models/instances/#django.db.models.Model"><code>django.db.models.Model</code></a>.</p>

<p><code>Customer</code> модель будет иметь следующие поля базы данных:</p>

<ul>
<li><strong><code>first_name</code></strong> — имя клиента.</li>
<li><strong><code>last_name</code></strong> — фамилия клиента.</li>
<li><strong><code>email</code></strong> — адрес электронной почты клиента.</li>
<li><strong><code>phone</code></strong> — номер телефона клиента.</li>
<li><strong><code>address</code></strong> — адрес клиента.</li>
<li><strong><code>description</code></strong> — описание клиента.</li>
<li><strong><code>createdAt</code></strong> — дата добавления клиента.</li>
</ul>

<p>Также мы добавим функцию <code>__str__()</code>, определяющую способ отображения модели. В нашем случае это будет имя клиента. Более подробную информацию по построению классов и определению объектов можно найти в документе <a href="https://www.digitalocean.com/community/tutorials/how-to-construct-classes-and-define-objects-in-python-3">«Построение классов и определение объектов в Python 3»</a>.</p>

<p>Добавьте в файл следующий код:</p>
<div class="code-label " title="~/djangoreactproject/customers/models.py">~/djangoreactproject/customers/models.py</div><pre class="code-pre "><code class="code-highlight language-python">from django.db import models

class Customer(models.Model):
    first_name = models.CharField("First name", max_length=255)
    last_name = models.CharField("Last name", max_length=255)
    email = models.EmailField()
    phone = models.CharField(max_length=20)
    address =  models.TextField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    createdAt = models.DateTimeField("Created At", auto_now_add=True)

    def __str__(self):
        return self.first_name
</code></pre>
<p>Затем выполните миграцию базы данных для создания таблиц базы данных. Команда <a href="https://www.digitalocean.com/community/tutorials/how-to-create-django-models#step-4-%E2%80%94-make-migrations"><code>makemigrations</code></a> создает файлы миграции, куда добавляются изменения модели, в команда <code>migrate</code> применяет все изменения в файлах миграции к базе данных.</p>

<p>Перейдите обратно в корневую папку проекта root:</p>
<pre class="code-pre custom_prefix prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">cd ~/djangoreactproject
</li></ul></code></pre>
<p>Запустите следующую команду для создания файлов миграции:</p>
<pre class="code-pre custom_prefix prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">python manage.py makemigrations
</li></ul></code></pre>
<p>Вы получите результат, выглядящий следующим образом:</p>
<pre class="code-pre  third-environment"><code><div class="secondary-code-label " title="Output">Output</div>customers/migrations/0001_initial.py
    - Create model Customer
</code></pre>
<p>Примените эти изменения в базе данных:</p>
<pre class="code-pre custom_prefix prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">python manage.py migrate
</li></ul></code></pre>
<p>Вы увидите следующий результат, показывающий, что миграция выполнена успешно:</p>
<pre class="code-pre  third-environment"><code><div class="secondary-code-label " title="Output">Output</div>Operations to perform:
  Apply all migrations: admin, auth, contenttypes, customers, sessions
Running migrations:
  Applying customers.0001_initial... OK
</code></pre>
<p>Затем вы используете <em>файл миграции данных</em> для создания начального набора данных клиента. <a href="https://docs.djangoproject.com/en/2.0/topics/migrations/#data-migrations">Файл миграции данных</a> используется для добавления или изменения данных в базе данных при миграции. Создайте пустой файл миграции данных дл приложения <code>customers</code>:</p>
<pre class="code-pre custom_prefix prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">python manage.py makemigrations --empty --name customers customers
</li></ul></code></pre>
<p>Вы увидите следующее подтверждение с именем файла миграции:</p>
<pre class="code-pre  third-environment"><code><div class="secondary-code-label " title="Output">Output</div>Migrations for 'customers':
  customers/migrations/0002_customers.py
</code></pre>
<p>Обратите внимание, что имя файла миграции <code>0002_customers.py</code>.</p>

<p>Затем перейдите в папку migrations приложения <code>customers</code>:</p>
<pre class="code-pre custom_prefix prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">cd ~/djangoreactproject/customers/migrations
</li></ul></code></pre>
<p>Откройте созданный файл миграции:</p>
<pre class="code-pre custom_prefix prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">nano 0002_customers.py
</li></ul></code></pre>
<p>Это первоначальное содержание файла:</p>
<div class="code-label " title="~/djangoreactproject/customers/migrations/0002_customers.py">~/djangoreactproject/customers/migrations/0002_customers.py</div><pre class="code-pre "><code class="code-highlight language-python">from django.db import migrations

class Migration(migrations.Migration):
    dependencies = [
        ('customers', '0001_initial'),
    ]
    operations = [
    ]        
</code></pre>
<p>Команда import импортирует API <code>migrations</code>. Это API Django для создания миграции из <code>django.db</code>, встроенного пакета, содержащего классы для работы с базами данных.</p>

<p>Класс <code>Migration</code> — это класс Python, описывающий операции, выполняемые во время миграции баз данных. Этот класс является расширением <code>migrations.Migration</code> и содержит два списка:</p>

<ul>
<li><strong><code>dependencies</code></strong>: содержит зависимые миграции.</li>
<li><strong><code>operations</code></strong>: содержит операции, которые будут выполняться во время проведения миграции.</li>
</ul>

<p>Затем добавьте <a href="https://www.digitalocean.com/community/tutorials/how-to-define-functions-in-python-3">метод</a> для создания данных демо-клиента. Следующий метод нужно добавить перед определением класса <code>Migration</code>:</p>
<div class="code-label " title="~/djangoreactproject/customers/migrations/0002_customers.py">~/djangoreactproject/customers/migrations/0002_customers.py</div><pre class="code-pre "><code class="code-highlight language-python">...
def create_data(apps, schema_editor):
    Customer = apps.get_model('customers', 'Customer')
    Customer(first_name="Customer 001", last_name="Customer 001", email="customer001@email.com", phone="00000000", address="Customer 000 Address", description= "Customer 001 description").save()

...
</code></pre>
<p>В этом методе мы берем класс <code>Customer</code> нашего приложения <code>customers</code> и создаем демо-клиента для добавления в базу данных.</p>

<p>Чтобы получить класс <code>Customer</code>, который позволит нам создавать новых клиентов, мы используем метод <code>get_model()</code> объекта <code>apps</code>. Объект <code>apps</code> представляет <a href="https://docs.djangoproject.com/en/2.1/ref/applications/#django.apps.apps">реестр</a> установленных приложений и их моделей баз данных.</p>

<p>Объект <code>apps</code> передается из метода <code>RunPython()</code>, когда мы используем его для запуска <code>create_data()</code>. Добавьте метод <code>migrations.RunPython()</code> в пустой список <code>operations</code>:</p>
<div class="code-label " title="~/djangoreactproject/customers/migrations/0002_customers.py">~/djangoreactproject/customers/migrations/0002_customers.py</div><pre class="code-pre "><code class="code-highlight language-python">
...
    operations = [
        <span class="highlight">migrations.RunPython(create_data),</span>
    ]  
</code></pre>
<p><code>RunPython()</code> — часть API Migrations, позволяющая запускать заданный код Python при миграции. Список <code>operations</code> указывает, что этот метод будет выполняться при проведении миграции.</p>

<p>Полный файл будет выглядеть следующим образом:</p>
<div class="code-label " title="~/djangoreactproject/customers/migrations/0002_customers.py">~/djangoreactproject/customers/migrations/0002_customers.py</div><pre class="code-pre "><code class="code-highlight language-python">from django.db import migrations

def create_data(apps, schema_editor):
    Customer = apps.get_model('customers', 'Customer')
    Customer(first_name="Customer 001", last_name="Customer 001", email="customer001@email.com", phone="00000000", address="Customer 000 Address", description= "Customer 001 description").save()

class Migration(migrations.Migration):
    dependencies = [
        ('customers', '0001_initial'),
    ]
    operations = [
        migrations.RunPython(create_data),
    ]        
</code></pre>
<p>Дополнительную информацию по миграции данных можно найти в <a href="https://docs.djangoproject.com/en/2.0/topics/migrations/#data-migrations">документации по миграции данных в Django</a></p>

<p>Чтобы выполнить миграцию базы данных, вернитесь в папку root вашего проекта:</p>
<pre class="code-pre custom_prefix prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">cd ~/djangoreactproject
</li></ul></code></pre>
<p>Выполните миграцию базы данных для создания демонстрационных данных:</p>
<pre class="code-pre custom_prefix prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">python manage.py migrate
</li></ul></code></pre>
<p>Вы увидите результат, подтверждающий миграцию:</p>
<pre class="code-pre  third-environment"><code><div class="secondary-code-label " title="Output">Output</div>Operations to perform:
  Apply all migrations: admin, auth, contenttypes, customers, sessions
Running migrations:
  Applying customers.0002_customers... OK
</code></pre>
<p>Более подробную информацию об этом процессе можно найти в <a href="https://www.digitalocean.com/community/tutorials/how-to-create-django-models">документе «Создание моделей Django»</a>.</p>

<p>После создания модели Customer и демо-данных, мы можем продолжить работу по созданию API REST.</p>

<h2 id="Шаг-5-—-Создание-api-rest">Шаг 5 — Создание API REST</h2>

<p>На этом шаге мы создадим API REST с помощью системы Django REST. Мы создадим несколько разных <em>представлений API</em>. Представление API представляет собой функцию, выполняющую запрос или вызов API, а <em>конечная точка API</em> — уникальный URL, представляющий собой элемент связи с системой REST. Например, когда пользователь направляет запрос GET в конечную точку API, Django вызывает соответствующую функцию или представление API для обработки запроса и возвращения любых возможных результатов.</p>

<p>Также мы используем <a href="http://www.django-rest-framework.org/api-guide/serializers/">сериализаторы</a>. <a href="https://docs.djangoproject.com/en/2.0/topics/serialization/">Сериализатор</a> в системе Django REST позволяет преобразовывать экземпляры сложных моделей и наборы QuerySets в формат JSON для использования API. Класс serializer может работать и в другом направлении, предоставляя механизмы для синтаксического анализа и десериализации данных в моделях Django и QuerySets.</p>

<p>Мы получим следующие конечные точки API:</p>

<ul>
<li><code>api/customers</code>: эта конечная точка используется для создания клиентов и возврата разбитых на страницы наборов клиентов.</li>
<li><code>api/customers/</code>: эта конечная точка испольузется для получения, обновления и удаления отдельных клиентов по первичным ключам или идентификаторам.</li>
</ul>

<p>Мы также создадим URL в файле проекта <code>urls.py</code> для соответствующих конечных точек (т.е. <code>api/customers</code> и <code>api/customers/</code>).</p>

<p>Начнем с создания <em>класса serializer</em> для нашей модели <code>Customer</code>.</p>

<h3 id="Добавление-класса-serializer">Добавление класса Serializer</h3>

<p>Создание класса serializer для нашей модели <code>Customer</code> необходимо для преобразования экземпляров клиентов и наборов QuerySets в JSON и обратно. Чтобы создать класс serializer, сначала создайте файл <code>serializers.py</code> в приложении <code>customers</code>:</p>
<pre class="code-pre custom_prefix prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">cd ~/djangoreactproject/customers/
</li><li class="line" prefix="(env) sammy@ubuntu:$">nano serializers.py
</li></ul></code></pre>
<p>Добавьте следующий код для импорта API serializers и модели <code>Customer</code>:</p>
<div class="code-label " title="~/djangoreactproject/customers/serializers.py">~/djangoreactproject/customers/serializers.py</div><pre class="code-pre "><code class="code-highlight language-python">from rest_framework import serializers
from .models import Customer
</code></pre>
<p>Затем создайте класс serializer, являющийся расширением <code>serializers.ModelSerializer</code> и указывающий поля для сериализации:</p>
<div class="code-label " title="~/djangoreactproject/customers/serializers.py">~/djangoreactproject/customers/serializers.py</div><pre class="code-pre "><code class="code-highlight language-python">
...
class CustomerSerializer(serializers.ModelSerializer):

    class Meta:
        model = Customer
        fields = ('pk','first_name', 'last_name', 'email', 'phone','address','description')
</code></pre>
<p>Класс <code>Meta</code> указывает модель и поля для сериализации: <code>pk</code>, <code>first_name</code>, <code>last_name</code>, <code>email</code>, <code>phone</code>, <code>address</code>, <code>description</code>:</p>

<p>Это полное содержание файла:</p>
<div class="code-label " title="~/djangoreactproject/customers/serializers.py">~/djangoreactproject/customers/serializers.py</div><pre class="code-pre "><code class="code-highlight language-python">from rest_framework import serializers
from .models import Customer

class CustomerSerializer(serializers.ModelSerializer):

    class Meta:
        model = Customer
        fields = ('pk','first_name', 'last_name', 'email', 'phone','address','description')
</code></pre>
<p>Создав класс serializer, мы можем добавить представления API.</p>

<h3 id="Добавление-представлений-api">Добавление представлений API</h3>

<p>В этом разделе мы создадим представления API для нашего приложения, которое будет вызываться Django, когда пользователь будет посещать конечную точку, соответствующую функции представления.</p>

<p>Откройте <code>~/djangoreactproject/customers/views.py</code>:</p>
<pre class="code-pre custom_prefix prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">nano ~/djangoreactproject/customers/views.py
</li></ul></code></pre>
<p>Удалите содержимое и добавьте следующие операции импорта:</p>
<div class="code-label " title="~/djangoreactproject/customers/views.py">~/djangoreactproject/customers/views.py</div><pre class="code-pre "><code class="code-highlight language-python">from rest_framework.response import Response
from rest_framework.decorators import api_view
from rest_framework import status

from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from .models import Customer
from .serializers import *
</code></pre>
<p>Мы импортируем созданный сериализатор, а также модель <code>Customer</code> и API Django и системы Django REST.</p>

<p>Затем добавьте представление для обработки запросов POST и GET HTTP:</p>
<div class="code-label " title="~/djangoreactproject/customers/views.py">~/djangoreactproject/customers/views.py</div><pre class="code-pre "><code class="code-highlight language-python">...

@api_view(['GET', 'POST'])
def customers_list(request):
    """
 List  customers, or create a new customer.
 """
    if request.method == 'GET':
        data = []
        nextPage = 1
        previousPage = 1
        customers = Customer.objects.all()
        page = request.GET.get('page', 1)
        paginator = Paginator(customers, 10)
        try:
            data = paginator.page(page)
        except PageNotAnInteger:
            data = paginator.page(1)
        except EmptyPage:
            data = paginator.page(paginator.num_pages)

        serializer = CustomerSerializer(data,context={'request': request} ,many=True)
        if data.has_next():
            nextPage = data.next_page_number()
        if data.has_previous():
            previousPage = data.previous_page_number()

        return Response({'data': serializer.data , 'count': paginator.count, 'numpages' : paginator.num_pages, 'nextlink': '/api/customers/?page=' + str(nextPage), 'prevlink': '/api/customers/?page=' + str(previousPage)})

    elif request.method == 'POST':
        serializer = CustomerSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
</code></pre>
<p>Вначале мы используем декоратор <code>@api_view(['GET', 'POST'])</code> для создания представления API, способного принимать запросы GET и POST. <a href="https://wiki.python.org/moin/PythonDecorators">Декоратор</a> — это функция, которая берет другую функцию и динамически расширяет ее.</p>

<p>В теле метода мы используем переменную <code>request.method</code> для проверки текущего метода HTTP и выполнения соответствующей логики в зависимости от типа запроса:</p>

<ul>
<li>Если это запрос GET, метод разбивает данные на страницы с помощью Django <a href="https://docs.djangoproject.com/en/2.0/topics/pagination/">Paginator</a> и возвращает первую страницу данных после сериализации, количество доступных клиентов, количество доступных страниц и ссылки на предыдущие и последующие страницы. Paginator — это встроенный класс Django, выполняющий разбивку списка данных на страницы и предоставляющий методы доступа к элементам на каждой странице.</li>
<li>Если это запрос POST, метод выполняет сериализацию полученных данных клиента, а затем вызывает метод <code>save()</code> с помощью объекта serializer. Затем он возвращает объект Response, являющийся экземпляром <a href="https://docs.djangoproject.com/en/2.0/ref/request-response/#httpresponse-objects">HttpResponse</a>, с кодом состояния 201. Каждое создаваемое представление отвечает за возврат объекта <code>HttpResponse</code>. Метод <code>save()</code> сохраняет сериализированные данные в базе данных.</li>
</ul>

<p>Дополнительную информацию об <code>HttpResponse</code> и представлениях можно найти в этой дискуссии о <a href="https://www.digitalocean.com/community/tutorials/how-to-create-django-views#step-1-%E2%80%94-create-view-functions">создании функций представления</a>.</p>

<p>Теперь добавьте представление API, которое будет отвечать за обработку запросов GET, PUT и DELETE для получения, обновления и удаления клиентов по <code>pk</code> (первичный ключ):</p>
<div class="code-label " title="~/djangoreactproject/customers/views.py">~/djangoreactproject/customers/views.py</div><pre class="code-pre "><code class="code-highlight language-python">
...
@api_view(['GET', 'PUT', 'DELETE'])
def customers_detail(request, pk):
 """
 Retrieve, update or delete a customer by id/pk.
 """
    try:
        customer = Customer.objects.get(pk=pk)
    except Customer.DoesNotExist:
        return Response(status=status.HTTP_404_NOT_FOUND)

    if request.method == 'GET':
        serializer = CustomerSerializer(customer,context={'request': request})
        return Response(serializer.data)

    elif request.method == 'PUT':
        serializer = CustomerSerializer(customer, data=request.data,context={'request': request})
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    elif request.method == 'DELETE':
        customer.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)
</code></pre>
<p>Метод оформлен с помощью декораторов <code>@api_view(['GET', 'PUT', 'DELETE'])</code>. Это означает, что он является представлением API, который может принимать запросы GET, PUT и DELETE.</p>

<p>Проверка поля <code>request.method</code> проверяет метод запроса и вызывает нужную логику в зависимости от значения:</p>

<ul>
<li>Если это запрос GET, выполняется сериализация данных клиента и их отправка с помощью объекта Response.</li>
<li>Если это запрос PUT, метод создает сериализатор для новых данных клиента. Затем он вызывает метод <code>save()</code> созданного объекта serializer. Наконец, он отправляет объект Response с обновленными данными клиента.</li>
<li>Если это запрос DELETE, метод вызывает метод <code>delete()</code> объекта customer для его удаления, после чего возвращает объект Response, не содержащий никаких данных.</li>
</ul>

<p>Завершенный файл выглядит следующим образом:</p>
<div class="code-label " title="~/djangoreactproject/customers/views.py">~/djangoreactproject/customers/views.py</div><pre class="code-pre "><code class="code-highlight language-python">from rest_framework.response import Response
from rest_framework.decorators import api_view
from rest_framework import status

from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from .models import Customer
from .serializers import *


@api_view(['GET', 'POST'])
def customers_list(request):
    """
 List  customers, or create a new customer.
 """
    if request.method == 'GET':
        data = []
        nextPage = 1
        previousPage = 1
        customers = Customer.objects.all()
        page = request.GET.get('page', 1)
        paginator = Paginator(customers, 5)
        try:
            data = paginator.page(page)
        except PageNotAnInteger:
            data = paginator.page(1)
        except EmptyPage:
            data = paginator.page(paginator.num_pages)

        serializer = CustomerSerializer(data,context={'request': request} ,many=True)
        if data.has_next():
            nextPage = data.next_page_number()
        if data.has_previous():
            previousPage = data.previous_page_number()

        return Response({'data': serializer.data , 'count': paginator.count, 'numpages' : paginator.num_pages, 'nextlink': '/api/customers/?page=' + str(nextPage), 'prevlink': '/api/customers/?page=' + str(previousPage)})

    elif request.method == 'POST':
        serializer = CustomerSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET', 'PUT', 'DELETE'])
def customers_detail(request, pk):
    """
 Retrieve, update or delete a customer by id/pk.
 """
    try:
        customer = Customer.objects.get(pk=pk)
    except Customer.DoesNotExist:
        return Response(status=status.HTTP_404_NOT_FOUND)

    if request.method == 'GET':
        serializer = CustomerSerializer(customer,context={'request': request})
        return Response(serializer.data)

    elif request.method == 'PUT':
        serializer = CustomerSerializer(customer, data=request.data,context={'request': request})
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    elif request.method == 'DELETE':
        customer.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)
</code></pre>
<p>Теперь мы можем перейти к созданию конечных точек.</p>

<h3 id="Добавление-конечных-точек-api">Добавление конечных точек API</h3>

<p>Теперь мы создадим конечные точки API: <code>api/customers/</code> для запроса и создания клиентов и <code>api/customers/&lt;pk&gt;</code> для получения, обновления и удаления отдельных клиентов по <code>pk</code>.</p>

<p>Откройте <code>~/djangoreactproject/djangoreactproject/urls.py</code>:</p>
<pre class="code-pre custom_prefix prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">nano ~/djangoreactproject/djangoreactproject/urls.py
</li></ul></code></pre>
<p>Оставьте его содержание без изменений, но добавьте в начало файла импорт в представление <code>customers</code>:</p>
<div class="code-label " title="~/djangoreactproject/djangoreactproject/urls.py">~/djangoreactproject/djangoreactproject/urls.py</div><pre class="code-pre "><code class="code-highlight language-python">from django.contrib import admin
from django.urls import path
<span class="highlight">from customers import views</span>
<span class="highlight">from django.conf.urls import url</span>
</code></pre>
<p>Затем добавьте URL-адреса <code>api/customers/</code> и <code>api/customers/</code> в <a href="https://www.digitalocean.com/community/tutorials/how-to-create-django-views#step-2-%E2%80%94-map-urls-to-views">список <code>urlpatterns</code></a>, содержащий URL приложения:</p>
<div class="code-label " title="~/djangoreactproject/djangoreactproject/urls.py">~/djangoreactproject/djangoreactproject/urls.py</div><pre class="code-pre "><code class="code-highlight language-python">...

urlpatterns = [
    path('admin/', admin.site.urls),
    <span class="highlight">url(r'^api/customers/$', views.customers_list),</span>
    <span class="highlight">url(r'^api/customers/(?P&lt;pk&gt;[0-9]+)$', views.customers_detail),</span>
]
</code></pre>
<p>Мы создали конечные точки REST, теперь рассмотрим их употребление.</p>

<h2 id="Шаг-6-—-Употребление-rest-api-с-axios">Шаг 6 — Употребление REST API с Axios</h2>

<p>На этом шаге мы установим <a href="https://github.com/axios/axios">Axios</a>, клиент HTTP, служащий для вызова API. Также мы создадим класс для потребления созданных нами конечных точек API.</p>

<p>Вначале отключите свою виртуальную среду:</p>
<pre class="code-pre custom_prefix prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="(env) sammy@ubuntu:$">deactivate
</li></ul></code></pre>
<p>Затем перейдите в папку <code>frontend</code>:</p>
<pre class="code-pre command prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="$">cd ~/djangoreactproject/frontend
</li></ul></code></pre>
<p>Установите <code>axios</code> из <code>npm</code> с помощью следующей команды:</p>
<pre class="code-pre command prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="$">npm install axios --save
</li></ul></code></pre>
<p>Опция <code>--save</code> добавляет зависимость <code>axios</code> в файл <code>package.json</code> вашего приложения.</p>

<p>Затем создайте файл JavaScript под названием <code>CustomersService.js</code>, который будет содержать код для вызова API REST. Это будет реализовано в папке <code>src</code>, где будет располагаться код приложения для нашего проекта:</p>
<pre class="code-pre command prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="$">cd src
</li><li class="line" prefix="$">nano CustomersService.js
</li></ul></code></pre>
<p>Добавьте следующий код, содержащий методы подключения к Django REST API:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomersService.js">~/djangoreactproject/frontend/src/CustomersService.js</div><pre class="code-pre "><code class="code-highlight language-js">import axios from 'axios';
const API_URL = 'http://localhost:8000';

export default class CustomersService{

    constructor(){}


    getCustomers() {
        const url = `${API_URL}/api/customers/`;
        return axios.get(url).then(response =&gt; response.data);
    }  
    getCustomersByURL(link){
        const url = `${API_URL}${link}`;
        return axios.get(url).then(response =&gt; response.data);
    }
    getCustomer(pk) {
        const url = `${API_URL}/api/customers/${pk}`;
        return axios.get(url).then(response =&gt; response.data);
    }
    deleteCustomer(customer){
        const url = `${API_URL}/api/customers/${customer.pk}`;
        return axios.delete(url);
    }
    createCustomer(customer){
        const url = `${API_URL}/api/customers/`;
        return axios.post(url,customer);
    }
    updateCustomer(customer){
        const url = `${API_URL}/api/customers/${customer.pk}`;
        return axios.put(url,customer);
    }
}
</code></pre>
<p>Класс <code>CustomersService</code> будет вызывать следующие методы Axios:</p>

<ul>
<li><code>getCustomers()</code>: получает первую страницу клиентов.</li>
<li><code>getCustomersByURL()</code>: получает клиентов по URL. Это позволяет получить следующие страницы клиентов путем передачи таких ссылок, как <code>/api/customers/?page=2</code>.</li>
<li><code>getCustomer()</code>: получает клиента по первичному ключу.</li>
<li><code>createCustomer()</code>: создает клиента.</li>
<li><code>updateCustomer()</code>: обновляет клиента.</li>
<li><code>deleteCustomer()</code>: удаляет клиента.</li>
</ul>

<p>Теперь мы можем выводить данные нашего API в пользовательском интерфейсе React, создавая компонент <code>CustomersList</code>.</p>

<h2 id="Шаг-7-—-Отображение-данных-из-api-в-приложении-react">Шаг 7 — Отображение данных из API в приложении React</h2>

<p>На этом шаге мы создадим <em>компонент</em> <code>CustomersList</code> React. Компонент React представляет часть пользовательского интерфейса; также он позволяет разделять пользовательский интерфейс на независимые элементы многоразового использования.</p>

<p>Для начала создайте <code>CustomersList.js</code> в папке <code>frontend/src</code>:</p>
<pre class="code-pre command prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="$">nano ~/djangoreactproject/frontend/src/CustomersList.js
</li></ul></code></pre>
<p>Вначале импортируйте <code>React</code> и <code>Component</code> для создания компонента React:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomersList.js">~/djangoreactproject/frontend/src/CustomersList.js</div><pre class="code-pre "><code class="code-highlight language-js">import  React, { Component } from  'react';
</code></pre>
<p>Затем импортируйте и создайте экземпляр модуля <code>CustomersService</code>, который вы создали на предыдущем шаге и который предоставляет методы взаимодействия с серверной частью REST API:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomersList.js">~/djangoreactproject/frontend/src/CustomersList.js</div><pre class="code-pre "><code class="code-highlight language-js">
...
import  CustomersService  from  './CustomersService';

const  customersService  =  new  CustomersService();
</code></pre>
<p>Затем создайте компонент <code>CustomersList</code>, расширяющий <code>Component</code> для вызова REST API. Компонент React должен <a href="https://reactjs.org/docs/react-component.html">расширять класс <code>Component</code> или создавать его подкласс</a>. Дополнительную информацию о классах E6 и наследовании можно найти в обучающем руководстве <a href="https://www.digitalocean.com/community/tutorials/understanding-classes-in-javascript">«Понимание классов в JavaScript»</a>.</p>

<p>Добавьте следующий код для создания компонента React, являющегося расширением <code>react.Component</code>:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomersList.js">~/djangoreactproject/frontend/src/CustomersList.js</div><pre class="code-pre "><code class="code-highlight language-js">
...
class  CustomersList  extends  Component {

    constructor(props) {
        super(props);
        this.state  = {
            customers: [],
            nextPageURL:  ''
        };
        this.nextPage  =  this.nextPage.bind(this);
        this.handleDelete  =  this.handleDelete.bind(this);
    }
}
export  default  CustomersList;
</code></pre>
<p>Внутри <a href="https://reactjs.org/docs/react-component.html#constructor">конструктора</a> мы выполняем инициализацию объекта <a href="https://reactjs.org/docs/react-component.html#state"><code>state</code></a>. В нем хранятся переменные state нашего компонента, для чего используется пустой <a href="https://www.digitalocean.com/community/tutorial_series/working-with-arrays-in-javascript">массив</a> <code>customers</code>. В этом массиве будут храниться клиенты и <code>nextPageURL</code>, где будет храниться URL следующей страницы для получения от серверного API. Также мы выполняем <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind">привязку</a> <a href="https://www.digitalocean.com/community/tutorials/understanding-classes-in-javascript#defining-methods">методов</a> <code>nextPage()</code> и <code>handleDelete()</code>, <code>this</code> чтобы они были доступны из кода HTML.</p>

<p>Затем добавьте метод <code>componentDidMount()</code> и вызов <code>getCustomers()</code> из класса <code>CustomersList</code>, после чего закройте фигурную скобку.</p>

<p>Метод <code>componentDidMount()</code> — это метод жизненного цикла компонента, вызываемый, когда компонент создается и вставляется в DOM. <code>getCustomers()</code> вызывает объект Customers Service для получения первой страницы данных и ссылки на следующую страницу из серверной части Django:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomersList.js">~/djangoreactproject/frontend/src/CustomersList.js</div><pre class="code-pre "><code class="code-highlight language-js">
...
componentDidMount() {
    var  self  =  this;
    customersService.getCustomers().then(function (result) {
        self.setState({ customers:  result.data, nextPageURL:  result.nextlink})
    });
}
</code></pre>
<p>Теперь добавьте метод <code>handleDelete()</code>, который обрабатывает удаление клиента, под <code>componentDidMount()</code>:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomersList.js">~/djangoreactproject/frontend/src/CustomersList.js</div><pre class="code-pre "><code class="code-highlight language-js">
...
handleDelete(e,pk){
    var  self  =  this;
    customersService.deleteCustomer({pk :  pk}).then(()=&gt;{
        var  newArr  =  self.state.customers.filter(function(obj) {
            return  obj.pk  !==  pk;
        });
        self.setState({customers:  newArr})
    });
}
</code></pre>
<p>Метод <code>handleDelete()</code> вызывает метод <code>deleteCustomer()</code> для удаления клиента по <code>pk</code> (первичный ключ). Если операция выполняется успешно, удаленный <code>customer</code> отфильтровывается из массива</p>

<p>Затем добавьте метод <code>nextPage()</code> для получения данных следующей страницы и обновления ссылки на следующую страницу:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomersList.js">~/djangoreactproject/frontend/src/CustomersList.js</div><pre class="code-pre "><code class="code-highlight language-js">
...
nextPage(){
    var  self  =  this;
    customersService.getCustomersByURL(this.state.nextPageURL).then((result) =&gt; {
        self.setState({ customers:  result.data, nextPageURL:  result.nextlink})
    });
}
</code></pre>
<p>Метод <code>nextPage()</code> вызывает метод <code>getCustomersByURL()</code>, который берет URL следующей страницы из объекта состояния <code>this.state.nextPageURL</code> и обновляет массив <code>customers</code>, добавляя в него возвращаемые данные.</p>

<p>Наконец, добавьте <a href="https://reactjs.org/docs/react-component.html#render">метод <code>render()</code></a> компонента, который выполняет рендеринг таблицы клиентов из состояния компонента:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomersList.js">~/djangoreactproject/frontend/src/CustomersList.js</div><pre class="code-pre "><code class="code-highlight language-js">
...
render() {

    return (
    &lt;div  className="customers--list"&gt;
        &lt;table  className="table"&gt;
            &lt;thead  key="thead"&gt;
            &lt;tr&gt;
                &lt;th&gt;#&lt;/th&gt;
                &lt;th&gt;First Name&lt;/th&gt;
                &lt;th&gt;Last Name&lt;/th&gt;
                &lt;th&gt;Phone&lt;/th&gt;
                &lt;th&gt;Email&lt;/th&gt;
                &lt;th&gt;Address&lt;/th&gt;
                &lt;th&gt;Description&lt;/th&gt;
                &lt;th&gt;Actions&lt;/th&gt;
            &lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody&gt;
                {this.state.customers.map( c  =&gt;
                &lt;tr  key={c.pk}&gt;
                    &lt;td&gt;{c.pk}  &lt;/td&gt;
                    &lt;td&gt;{c.first_name}&lt;/td&gt;
                    &lt;td&gt;{c.last_name}&lt;/td&gt;
                    &lt;td&gt;{c.phone}&lt;/td&gt;
                    &lt;td&gt;{c.email}&lt;/td&gt;
                    &lt;td&gt;{c.address}&lt;/td&gt;
                    &lt;td&gt;{c.description}&lt;/td&gt;
                    &lt;td&gt;
                    &lt;button  onClick={(e)=&gt;  this.handleDelete(e,c.pk) }&gt; Delete&lt;/button&gt;
                    &lt;a  href={"/customer/" + c.pk}&gt; Update&lt;/a&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;)}
            &lt;/tbody&gt;
        &lt;/table&gt;
        &lt;button  className="btn btn-primary"  onClick=  {  this.nextPage  }&gt;Next&lt;/button&gt;
    &lt;/div&gt;
    );
}
</code></pre>
<p>Это полное содержание файла:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomersList.js">~/djangoreactproject/frontend/src/CustomersList.js</div><pre class="code-pre "><code class="code-highlight language-js">import  React, { Component } from  'react';
import  CustomersService  from  './CustomersService';

const  customersService  =  new  CustomersService();

class  CustomersList  extends  Component {

constructor(props) {
    super(props);
    this.state  = {
        customers: [],
        nextPageURL:  ''
    };
    this.nextPage  =  this.nextPage.bind(this);
    this.handleDelete  =  this.handleDelete.bind(this);
}

componentDidMount() {
    var  self  =  this;
    customersService.getCustomers().then(function (result) {
        console.log(result);
        self.setState({ customers:  result.data, nextPageURL:  result.nextlink})
    });
}
handleDelete(e,pk){
    var  self  =  this;
    customersService.deleteCustomer({pk :  pk}).then(()=&gt;{
        var  newArr  =  self.state.customers.filter(function(obj) {
            return  obj.pk  !==  pk;
        });

        self.setState({customers:  newArr})
    });
}

nextPage(){
    var  self  =  this;
    console.log(this.state.nextPageURL);        
    customersService.getCustomersByURL(this.state.nextPageURL).then((result) =&gt; {
        self.setState({ customers:  result.data, nextPageURL:  result.nextlink})
    });
}
render() {

    return (
        &lt;div  className="customers--list"&gt;
            &lt;table  className="table"&gt;
            &lt;thead  key="thead"&gt;
            &lt;tr&gt;
                &lt;th&gt;#&lt;/th&gt;
                &lt;th&gt;First Name&lt;/th&gt;
                &lt;th&gt;Last Name&lt;/th&gt;
                &lt;th&gt;Phone&lt;/th&gt;
                &lt;th&gt;Email&lt;/th&gt;
                &lt;th&gt;Address&lt;/th&gt;
                &lt;th&gt;Description&lt;/th&gt;
                &lt;th&gt;Actions&lt;/th&gt;
            &lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody&gt;
            {this.state.customers.map( c  =&gt;
                &lt;tr  key={c.pk}&gt;
                &lt;td&gt;{c.pk}  &lt;/td&gt;
                &lt;td&gt;{c.first_name}&lt;/td&gt;
                &lt;td&gt;{c.last_name}&lt;/td&gt;
                &lt;td&gt;{c.phone}&lt;/td&gt;
                &lt;td&gt;{c.email}&lt;/td&gt;
                &lt;td&gt;{c.address}&lt;/td&gt;
                &lt;td&gt;{c.description}&lt;/td&gt;
                &lt;td&gt;
                &lt;button  onClick={(e)=&gt;  this.handleDelete(e,c.pk) }&gt; Delete&lt;/button&gt;
                &lt;a  href={"/customer/" + c.pk}&gt; Update&lt;/a&gt;
                &lt;/td&gt;
            &lt;/tr&gt;)}
            &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;button  className="btn btn-primary"  onClick=  {  this.nextPage  }&gt;Next&lt;/button&gt;
        &lt;/div&gt;
        );
  }
}
export  default  CustomersList;
</code></pre>
<p>Мы создали компонент <code>CustomersList</code> для отображения списка клиентов, и теперь можем добавить компонент для обработки создания и обновления клиентов.</p>

<h2 id="Шаг-8-—-Добавление-компонентов-react-для-создания-и-обновления-клиентов">Шаг 8 — Добавление компонентов React для создания и обновления клиентов</h2>

<p>На этом шаге мы создадим компонент <code>CustomerCreateUpdate</code>, который будет заниматься созданием и обновлением клиентов. Для этого он будет предоставлять форму, где пользователи смогут вводить данные о новом клиенте или изменять уже записанные данные.</p>

<p>Создайте в папке <code>frontend/src</code> файл <code>CustomerCreateUpdate.js</code>:</p>
<pre class="code-pre command prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="$">nano ~/djangoreactproject/frontend/src/CustomerCreateUpdate.js
</li></ul></code></pre>
<p>Добавьте следующий код для создания компонента <code>React</code>, импортировав классы React и <code>Component</code>:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomerCreateUpdate.js">~/djangoreactproject/frontend/src/CustomerCreateUpdate.js</div><pre class="code-pre "><code class="code-highlight language-js">import  React, { Component } from  'react';
</code></pre>
<p>Также мы можем импортировать класс <code>CustomersService</code>, созданный на предыдущем шаге и создать экземпляр этого класса, который предоставляет методы взаимодействия с серверной частью API REST:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomerCreateUpdate.js">~/djangoreactproject/frontend/src/CustomerCreateUpdate.js</div><pre class="code-pre "><code class="code-highlight language-js">...
import  CustomersService  from  './CustomersService';

const  customersService  =  new  CustomersService();
</code></pre>
<p>Далее создайте компонент <code>CustomerCreateUpdate</code>, расширяющий класс <code>Component</code> для создания и обновления клиентов:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomerCreateUpdate.js">~/djangoreactproject/frontend/src/CustomerCreateUpdate.js</div><pre class="code-pre "><code class="code-highlight language-js">
...
class  CustomerCreateUpdate  extends  Component {

    constructor(props) {
        super(props);
    }

}
export default CustomerCreateUpdate;
</code></pre>
<p>Добавьте в определение класса метод компонента <code>render()</code>, отвечающий за рендеринг формы HTML, куда вводится информация о клиенте:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomerCreateUpdate.js">~/djangoreactproject/frontend/src/CustomerCreateUpdate.js</div><pre class="code-pre "><code class="code-highlight language-js">
...
render() {
        return (
          &lt;form onSubmit={this.handleSubmit}&gt;
          &lt;div className="form-group"&gt;
            &lt;label&gt;
              First Name:&lt;/label&gt;
              &lt;input className="form-control" type="text" ref='firstName' /&gt;

            &lt;label&gt;
              Last Name:&lt;/label&gt;
              &lt;input className="form-control" type="text" ref='lastName'/&gt;

            &lt;label&gt;
              Phone:&lt;/label&gt;
              &lt;input className="form-control" type="text" ref='phone' /&gt;

            &lt;label&gt;
              Email:&lt;/label&gt;
              &lt;input className="form-control" type="text" ref='email' /&gt;

            &lt;label&gt;
              Address:&lt;/label&gt;
              &lt;input className="form-control" type="text" ref='address' /&gt;

            &lt;label&gt;
              Description:&lt;/label&gt;
              &lt;textarea className="form-control" ref='description' &gt;&lt;/textarea&gt;


            &lt;input className="btn btn-primary" type="submit" value="Submit" /&gt;
            &lt;/div&gt;
          &lt;/form&gt;
        );
  }
</code></pre>
<p>Для каждого элемента ввода формы метод добавляет свойство <code>ref</code> для доступа и установки значения элемента формы.</p>

<p>Над методом <code>render()</code> создайте определение метода <code>handleSubmit(event)</code>, чтобы при нажатии на кнопку Submit (Отправить) функция работала надлежащим образом:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomerCreateUpdate.js">~/djangoreactproject/frontend/src/CustomerCreateUpdate.js</div><pre class="code-pre "><code class="code-highlight language-js">
...
handleSubmit(event) {
    const { match: { params } } =  this.props;
    if(params  &amp;&amp;  params.pk){
        this.handleUpdate(params.pk);
    }
    else
    {
        this.handleCreate();
    }
    event.preventDefault();
}

...
</code></pre>
<p>Метод <code>handleSubmit(event)</code> обрабатывает отправку форм и (в зависимости от маршрута) вызывет метод <code>handleUpdate(pk)</code> для обновления клиента с переданным <code>pk</code> или метод <code>handleCreate()</code> для создания нового клиента. Мы дадим краткое определение этих методов.</p>

<p>Выполните в конструкторе компонентов привязку добавленного метода <code>handleSubmit()</code> к <code>этому</code> методу, чтобы вы могли использовать его в своей форме:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomerCreateUpdate.js">~/djangoreactproject/frontend/src/CustomerCreateUpdate.js</div><pre class="code-pre "><code class="code-highlight language-js">...
class CustomerCreateUpdate extends Component {

constructor(props) {
    super(props);
    <span class="highlight">this.handleSubmit = this.handleSubmit.bind(this);</span>
}
...
</code></pre>
<p>Затем дайте определение методу <code>handleCreate()</code> для создания клиента на основе данных формы. Над методом <code>handleSubmit(event)</code> добавьте следующий код:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomerCreateUpdate.js">~/djangoreactproject/frontend/src/CustomerCreateUpdate.js</div><pre class="code-pre "><code class="code-highlight language-js">
...
handleCreate(){
    customersService.createCustomer(
        {
        "first_name":  this.refs.firstName.value,
        "last_name":  this.refs.lastName.value,
        "email":  this.refs.email.value,
        "phone":  this.refs.phone.value,
        "address":  this.refs.address.value,
        "description":  this.refs.description.value
        }).then((result)=&gt;{
                alert("Customer created!");
        }).catch(()=&gt;{
                alert('There was an error! Please re-check your form.');
        });
}

...
</code></pre>
<p>Метод <code>handleCreate()</code> будет использоваться для создания клиента на основе введенных данных. Он вызывает соответствующий метод <code>CustomersService.createCustomer()</code>, который API использует для вызова серверной части для создания клиента.</p>

<p>Под методом <code>handleCreate()</code> дайте определение метода <code>handleUpdate(pk)</code> для выполнения обновлений:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomerCreateUpdate.js">~/djangoreactproject/frontend/src/CustomerCreateUpdate.js</div><pre class="code-pre "><code class="code-highlight language-js">
...
handleUpdate(pk){
customersService.updateCustomer(
    {
    "pk":  pk,
    "first_name":  this.refs.firstName.value,
    "last_name":  this.refs.lastName.value,
    "email":  this.refs.email.value,
    "phone":  this.refs.phone.value,
    "address":  this.refs.address.value,
    "description":  this.refs.description.value
    }
    ).then((result)=&gt;{

        alert("Customer updated!");
    }).catch(()=&gt;{
        alert('There was an error! Please re-check your form.');
    });
}
</code></pre>
<p>Метод <code>updateCustomer()</code> обновляет клиента по <code>pk</code>, используя новую информацию из формы данных о клиенте. Он вызывает метод <code>customersService.updateCustomer()</code>.</p>

<p>Затем добавьте метод <code>componentDidMount()</code>. Если пользователь посещает маршрут <code>customer/:pk</code>, нужно заполнить форму информацией о клиенте, используя первичный ключ из URL. Для этого мы можем добавить метод <code>getCustomer(pk)</code> после монтирования компонента в событии жизненного цикла <code>componentDidMount()</code>. Для добавления этого метода добавьте следующий код после конструктора компонентов:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomerCreateUpdate.js">~/djangoreactproject/frontend/src/CustomerCreateUpdate.js</div><pre class="code-pre "><code class="code-highlight language-js">
...
componentDidMount(){
    const { match: { params } } =  this.props;
    if(params  &amp;&amp;  params.pk)
    {
        customersService.getCustomer(params.pk).then((c)=&gt;{
            this.refs.firstName.value  =  c.first_name;
            this.refs.lastName.value  =  c.last_name;
            this.refs.email.value  =  c.email;
            this.refs.phone.value  =  c.phone;
            this.refs.address.value  =  c.address;
            this.refs.description.value  =  c.description;
        })
    }
}
</code></pre>
<p>Это полное содержание файла:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/CustomerCreateUpdate.js">~/djangoreactproject/frontend/src/CustomerCreateUpdate.js</div><pre class="code-pre "><code class="code-highlight language-js">import React, { Component } from 'react';
import CustomersService from './CustomersService';

const customersService = new CustomersService();

class CustomerCreateUpdate extends Component {
    constructor(props) {
        super(props);

        this.handleSubmit = this.handleSubmit.bind(this);
      }

      componentDidMount(){
        const { match: { params } } = this.props;
        if(params &amp;&amp; params.pk)
        {
          customersService.getCustomer(params.pk).then((c)=&gt;{
            this.refs.firstName.value = c.first_name;
            this.refs.lastName.value = c.last_name;
            this.refs.email.value = c.email;
            this.refs.phone.value = c.phone;
            this.refs.address.value = c.address;
            this.refs.description.value = c.description;
          })
        }
      }

      handleCreate(){
        customersService.createCustomer(
          {
            "first_name": this.refs.firstName.value,
            "last_name": this.refs.lastName.value,
            "email": this.refs.email.value,
            "phone": this.refs.phone.value,
            "address": this.refs.address.value,
            "description": this.refs.description.value
        }          
        ).then((result)=&gt;{
          alert("Customer created!");
        }).catch(()=&gt;{
          alert('There was an error! Please re-check your form.');
        });
      }
      handleUpdate(pk){
        customersService.updateCustomer(
          {
            "pk": pk,
            "first_name": this.refs.firstName.value,
            "last_name": this.refs.lastName.value,
            "email": this.refs.email.value,
            "phone": this.refs.phone.value,
            "address": this.refs.address.value,
            "description": this.refs.description.value
        }          
        ).then((result)=&gt;{
          console.log(result);
          alert("Customer updated!");
        }).catch(()=&gt;{
          alert('There was an error! Please re-check your form.');
        });
      }
      handleSubmit(event) {
        const { match: { params } } = this.props;

        if(params &amp;&amp; params.pk){
          this.handleUpdate(params.pk);
        }
        else
        {
          this.handleCreate();
        }

        event.preventDefault();
      }

      render() {
        return (
          &lt;form onSubmit={this.handleSubmit}&gt;
          &lt;div className="form-group"&gt;
            &lt;label&gt;
              First Name:&lt;/label&gt;
              &lt;input className="form-control" type="text" ref='firstName' /&gt;

            &lt;label&gt;
              Last Name:&lt;/label&gt;
              &lt;input className="form-control" type="text" ref='lastName'/&gt;

            &lt;label&gt;
              Phone:&lt;/label&gt;
              &lt;input className="form-control" type="text" ref='phone' /&gt;

            &lt;label&gt;
              Email:&lt;/label&gt;
              &lt;input className="form-control" type="text" ref='email' /&gt;

            &lt;label&gt;
              Address:&lt;/label&gt;
              &lt;input className="form-control" type="text" ref='address' /&gt;

            &lt;label&gt;
              Description:&lt;/label&gt;
              &lt;textarea className="form-control" ref='description' &gt;&lt;/textarea&gt;


            &lt;input className="btn btn-primary" type="submit" value="Submit" /&gt;
            &lt;/div&gt;
          &lt;/form&gt;
        );
      }  
}

export default CustomerCreateUpdate;
</code></pre>
<p>После создания компонента <code>CustomerCreateUpdate</code> мы можем обновить компонент main <code>App</code> и добавить ссылки на различные созданные нами компоненты.</p>

<h2 id="Шаг-9-—-Обновление-компонента-main-app">Шаг 9 — Обновление компонента Main App</h2>

<p>На этом шаге мы обновим компонент <code>App</code> нашего приложения для создания ссылок на компоненты, созданные на предыдущих шагах.</p>

<p>Запустите из папки <code>frontend</code> следующую команду для установки <a href="https://www.npmjs.com/package/react-router-dom">React Router</a>, что позволит добавить маршрутизацию и навигацию между разными компонентами React:</p>
<pre class="code-pre command prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="$">cd ~/djangoreactproject/frontend
</li><li class="line" prefix="$">npm install --save react-router-dom
</li></ul></code></pre>
<p>Далее откройте <code>~/djangoreactproject/frontend/src/App.js</code>:</p>
<pre class="code-pre command prefixed third-environment"><code><ul class="prefixed"><li class="line" prefix="$">nano ~/djangoreactproject/frontend/src/App.js
</li></ul></code></pre>
<p>Удалите все содержимое и добавьте следующий код, чтобы импортировать необходимые классы для добавления маршрутизации. В их число входит <code>класс BrowserRouter, создающий компонент Router, и класс Route, создающий компонент route:</code>&ldquo;</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/App.js">~/djangoreactproject/frontend/src/App.js</div><pre class="code-pre "><code class="code-highlight language-js">import  React, { Component } from  'react';
import { BrowserRouter } from  'react-router-dom'
import { Route, Link } from  'react-router-dom'
import  CustomersList  from  './CustomersList'
import  CustomerCreateUpdate  from  './CustomerCreateUpdate'
import  './App.css';
</code></pre>
<p><a href="https://reacttraining.com/react-router/web/api/BrowserRouter"><code>BrowserRouter</code></a> обеспечивает синхронизацию пользовательского интерфейса с URL, используя <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">API истории HTML5</a>.</p>

<p>Далее создайте базовую схему, обеспечивающую базовый компонент для включения в компонент <code>BrowserRouter</code>:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/App.js">~/djangoreactproject/frontend/src/App.js</div><pre class="code-pre "><code class="code-highlight language-js">...

const  BaseLayout  = () =&gt; (
&lt;div  className="container-fluid"&gt;
    &lt;nav  className="navbar navbar-expand-lg navbar-light bg-light"&gt;
        &lt;a  className="navbar-brand"  href="#"&gt;Django React Demo&lt;/a&gt;
        &lt;button  className="navbar-toggler"  type="button"  data-toggle="collapse"  data-target="#navbarNavAltMarkup"  aria-controls="navbarNavAltMarkup"  aria-expanded="false"  aria-label="Toggle navigation"&gt;
        &lt;span  className="navbar-toggler-icon"&gt;&lt;/span&gt;
    &lt;/button&gt;
    &lt;div  className="collapse navbar-collapse"  id="navbarNavAltMarkup"&gt;
        &lt;div  className="navbar-nav"&gt;
            &lt;a  className="nav-item nav-link"  href="/"&gt;CUSTOMERS&lt;/a&gt;
            &lt;a  className="nav-item nav-link"  href="/customer"&gt;CREATE CUSTOMER&lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;/nav&gt;
    &lt;div  className="content"&gt;
        &lt;Route  path="/"  exact  component={CustomersList}  /&gt;
        &lt;Route  path="/customer/:pk"  component={CustomerCreateUpdate}  /&gt;
        &lt;Route  path="/customer/"  exact  component={CustomerCreateUpdate}  /&gt;
    &lt;/div&gt;
&lt;/div&gt;
)
</code></pre>
<p>Мы используем компонент <code>Route</code> для определения маршрутов нашего приложения; компонент, который должен загружать маршрутизатор после обнаружения совпадения. Для каждого маршрута требуются параметры <code>path</code> для указания пути сопоставления и <code>component</code> для указания загружаемого компонента. Свойство <code>exact</code> указывает маршрутизатору на необходимость точного соответствия пути.</p>

<p>Наконец, создайте компонент <code>App</code>. Это корневой компонент или компонент самого верхнего уровня нашего приложения React:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/App.js">~/djangoreactproject/frontend/src/App.js</div><pre class="code-pre "><code class="code-highlight language-js">...

class  App  extends  Component {

render() {
    return (
    &lt;BrowserRouter&gt;
        &lt;BaseLayout/&gt;
    &lt;/BrowserRouter&gt;
    );
}
}
export  default  App;
</code></pre>
<p>Мы поместили компонент <code>BaseLayout</code> в компонент <code>BrowserRouter</code>, потому что наше приложение предусматривает работу через браузер.</p>

<p>Завершенный файл выглядит следующим образом:</p>
<div class="code-label " title="~/djangoreactproject/frontend/src/App.js">~/djangoreactproject/frontend/src/App.js</div><pre class="code-pre "><code class="code-highlight language-js">import React, { Component } from 'react';
import { BrowserRouter } from 'react-router-dom'
import { Route, Link } from 'react-router-dom'

import  CustomersList from './CustomersList'
import  CustomerCreateUpdate  from './CustomerCreateUpdate'
import './App.css';

const BaseLayout = () =&gt; (
  &lt;div className="container-fluid"&gt;
&lt;nav className="navbar navbar-expand-lg navbar-light bg-light"&gt;
  &lt;a className="navbar-brand" href="#"&gt;Django React Demo&lt;/a&gt;
  &lt;button className="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation"&gt;
    &lt;span className="navbar-toggler-icon"&gt;&lt;/span&gt;
  &lt;/button&gt;
  &lt;div className="collapse navbar-collapse" id="navbarNavAltMarkup"&gt;
    &lt;div className="navbar-nav"&gt;
      &lt;a className="nav-item nav-link" href="/"&gt;CUSTOMERS&lt;/a&gt;
      &lt;a className="nav-item nav-link" href="/customer"&gt;CREATE CUSTOMER&lt;/a&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/nav&gt;  

    &lt;div className="content"&gt;
      &lt;Route path="/" exact component={CustomersList} /&gt;
      &lt;Route path="/customer/:pk"  component={CustomerCreateUpdate} /&gt;
      &lt;Route path="/customer/" exact component={CustomerCreateUpdate} /&gt;

    &lt;/div&gt;

  &lt;/div&gt;
)

class App extends Component {
  render() {
    return (
      &lt;BrowserRouter&gt;
        &lt;BaseLayout/&gt;
      &lt;/BrowserRouter&gt;
    );
  }
}

export default App;
</code></pre>
<p>После добавления маршрутизации в приложение можно начать его тестирование. Откройте адрес <code>http://localhost:3000</code>. Вы увидите первую страницу приложения:</p>

<p><img src="https://assets.digitalocean.com/articles/django_react_1604/django_react_app.png" alt="Главная страница приложения"></p>

<p>С этим приложением вы получили основу для создания приложения CRM.</p>

<h2 id="Заключение">Заключение</h2>

<p>Это обучающее руководство помогло вам научиться создавать демонстрационное приложение с помощью Django и React. Вы использовали систему Django REST для создания REST API, Axios для потребления API, и Bootstrap 4 для стилизации CSS. Исходный код этого проекта можно найти в <a href="https://github.com/techiediaries/django-react">хранилище GitHub</a>.</p>

<p>В этом обучающем руководстве были использованы отдельные приложения для клиентской части и серверной части. Другой подход к интеграции React с Django можно найти в <a href="https://www.techiediaries.com/django-react-rest/">этом руководстве</a> и <a href="http://v1k45.com/blog/modern-django-part-1-setting-up-django-and-react/">этом руководстве</a>.</p>

<p>Дополнительную информацию о создании приложений с помощью Django можно найти в <a href="https://www.digitalocean.com/community/tutorial_series/django-development">серии публикаций «Разработка в Django»</a>. Также вы можете ознакомиться с <a href="https://docs.djangoproject.com/en/2.1/">официальной документацией по Django</a>.</p>

 </div>

</div>

<div class="tutorial-footer">
  <div class='tutorial-footer-details'>


      <div class="tfb--container">
  <div class="tfb--content">
    <div class="tfb--undo tfb--hide">
      <span class="icon icon-helpfulness-upvoted"></span>
      <span class="tfb--question">Вы оценили этот перевод как полезный.</span>
      <button name="button" type="submit" class="tfb--button-down tfb--thumb-down-js">Undo</button>
    </div>

    <div class="tfb--flagging-undo tfb--hide">
      <span class="icon icon-helpfulness-flag"></span>
      <span class="tfb--question">Вы отметили этот перевод флагом.</span>
      <button name="button" type="submit" class="tfb--button-down tfb--unflagging-js">Undo</button>
    </div>

    <div class="tfb--do">
      <span class="tfb--question">Вам понравилось качество перевода?</span>
      <button name="button" type="submit" class="tfb--button tfb--thumb-up-js" data-translation-upvote-id="3346" data-translation-upvote-type="Tutorial" role="button" aria-label="Good">👍</button>
      <button name="button" type="submit" class="tfb--button tfb--flagging-js" data-translation-flag-id="3346" data-translation-flag-type="Tutorial" role="button" aria-label="Bad">👎</button>
    </div>
  </div>
</div>




      
<div class="hsb--container">
  <div class="hsb--content">
    <div class="hsb--undo hsb--hide">
      <span class="icon icon-helpfulness-upvoted"></span>
      <span class="hsb--question">You rated this helpful.</span>
      <button name="button" type="submit" class="hsb--button-down hsb--vote-down-js" data-upvotable-type="Tutorial">Undo</button>
    </div>

    <div class="hsb--flagging-undo hsb--hide">
      <span class="icon icon-helpfulness-flag"></span>
      <span class="hsb--question">You reported this tutorial.</span>
      <button name="button" type="submit" class="hsb--button-down hsb--unflagging-js">Undo</button>
    </div>

    <div class="hsb--do">
      <span class="hsb--question">Was this helpful?</span>
      <button name="button" type="submit" class="hsb--button hsb--vote-up-js" id="submit-upvote-report" data-upvotable-id="3346" data-upvotable-type="Tutorial">Yes</button>
      <button name="button" type="submit" class="hsb--button hsb--flagging-js" data-url="/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru/flag" data-flaggable-id="3346" data-flag-type="no">No</button>
    </div>

    <div class="hsb--social-and-comments">
      <div class="hsb--social-sharing">
        <a target="_blank" class="share-popup" href="http://twitter.com/share?text=%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5%20%D1%81%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E%20Django%20%D0%B8%20React%20%D1%81%D0%BE%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE%20%D0%B2%D0%B5%D0%B1-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%BB%D1%8F%20%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8%20%D0%BA%D0%BB%D0%B8%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20Ubuntu%2018.04&amp;url=https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru?utm_content=how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru&amp;utm_medium=community&amp;utm_source=twshare">
          <span class="icon icon-helpfulness-twitter"></span>
</a>
        <a target="_blank" class="share-popup" href="https://www.facebook.com/sharer/sharer.php?u=https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru?utm_content=how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru&amp;utm_medium=community&amp;utm_source=fbshare">
          <span class="icon icon-helpfulness-facebook"></span>
</a>
        <a target="_blank" class="share-popup" href="https://news.ycombinator.com/submitlink?t=%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5%20%D1%81%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E%20Django%20%D0%B8%20React%20%D1%81%D0%BE%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE%20%D0%B2%D0%B5%D0%B1-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%BB%D1%8F%20%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8%20%D0%BA%D0%BB%D0%B8%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20Ubuntu%2018.04&amp;u=https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru?utm_content=how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru&amp;utm_medium=community&amp;utm_source=hnshare">
          <span class="icon icon-helpfulness-hacker-news"></span>
</a>      </div>

      <div class="hsb--comment">
        <span class="icon icon-helpfulness-comment"></span>
        <strong class="amount">0</strong>
      </div>
    </div>
  </div>
  <a class="hsb--flagging-js" data-url="/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru/flag" data-flaggable-id="3346" data-flag-type="report" href="javascript:void(0);">Report an issue</a>
</div>



    <div class="component-collaborators-container-footer">
  <div class="component-collaborators-content">
    <div class="heading">About the authors</div>

      <div class="author">
          <a href="/community/users/mrnerd">
            <div class="avatar">
              <img alt="mrnerd" class="avatar avatar-large" src="https://secure.gravatar.com/avatar/5f105543436ef874c1e9d02694eb8ffd?secure=true&d=identicon" width="80" height="80" />
            </div>
</a>          <div class="byline-info">
            <div class="names">
              <a href="/community/users/mrnerd">
                Ahmed Bouchefra
</a>            </div>
              <p>I&#39;m a web and mobile developer. I&#39;m proficient with Android, Ionic and React and have working experience with Python Django, Java and Node.js   </p>
          </div>
      </div>

      <div class="editor-translator">

          <div class="author">
            <a href="/community/users/katjuell">
                <div class="avatar">
                  <div class="mod-avatar mod-avatar-large"><img class="avatar avatar-large" src="https://community-cdn-digitalocean-com.global.ssl.fastly.net/assets/users/avatars/large/748ce760fc8ab2840a415f65ee0d674c24845854.jpg?1583348780" /><span class="mod-star" title="MOD" data-toggle="tooltip" data-container="body"><span class="mod-star-icon"></span></span></div>
                </div>
</a>            <div class="byline-info">
              <div class="names-editor-translator">
                <a href="/community/users/katjuell">
                  Kathleen Juell
</a>              </div>
              <p>Editor</p>
            </div>
          </div>
      </div>
  </div>
</div>


</div>



  <div class='related-content'>
    <div class='section-content panels'>
      <h2>Related</h2>

      <ul>
        <li title="Настройка Jupyter Notebook с помощью Python 3 в Ubuntu 20.04 и подключение через туннель SSH">
  <a class="panel" href="/community/tutorials/how-to-set-up-jupyter-notebook-with-python-3-on-ubuntu-20-04-and-connect-via-ssh-tunneling-ru">
    <h6>Tutorial</h6>
    <div class="panel-data">
      <h5>Настройка Jupyter Notebook с помощью Python 3 в Ubuntu 20.04 и подключение через туннель SSH</h5>
      <p data-clamp>Jupyter Notebook — веб-приложение с открытым исходным кодом, позволяющее создавать интерактивный код, визуализации и другие элементы и делиться ими. Этот инструмент можно использовать с несколькими языками программирования, включая Python, Julia, R, Haskell…</p>
    </div>
  </a>
</li>
<li title="Установка Webmin в Ubuntu 20.04">
  <a class="panel" href="/community/tutorials/how-to-install-webmin-on-ubuntu-20-04-ru">
    <h6>Tutorial</h6>
    <div class="panel-data">
      <h5>Установка Webmin в Ubuntu 20.04</h5>
      <p data-clamp>Webmin — современная веб-панель управления, позволяющая выполнять администрирование сервера Linux через интерфейс браузера. С Webmin вы можете легко и быстро управлять учетными записями пользователей, выполнять настройки DNS и изменять параметры…</p>
    </div>
  </a>
</li>
<li title="Установка и настройка VNC в Ubuntu 20.04">
  <a class="panel" href="/community/tutorials/how-to-install-and-configure-vnc-on-ubuntu-20-04-ru">
    <h6>Tutorial</h6>
    <div class="panel-data">
      <h5>Установка и настройка VNC в Ubuntu 20.04</h5>
      <p data-clamp>Virtual Network Computing или VNC — это система подключения, позволяющая использовать клавиатуру и мышь для взаимодействия с графической средой рабочего стола на удаленном сервере. Данная система упрощает управление файлами, программным обеспечением и настройками на удаленном…</p>
    </div>
  </a>
</li>
<li title="Установка и настройка VNC в Ubuntu 20.04 [Краткое руководство]">
  <a class="panel" href="/community/tutorials/how-to-install-and-configure-vnc-on-ubuntu-20-04-quickstart-ru">
    <h6>Tutorial</h6>
    <div class="panel-data">
      <h5>Установка и настройка VNC в Ubuntu 20.04 [Краткое руководство]</h5>
      <p data-clamp>Virtual Network Computing или VNC — это система подключения, позволяющая использовать клавиатуру и мышь для взаимодействия с графической средой рабочего стола на удаленном сервере. Данная система упрощает управление файлами, программным обеспечением и настройками на удаленном…</p>
    </div>
  </a>
</li>

      </ul>
    </div>
  </div>



  <div class='looking-for-an-answer'>
  <div class='section-content'>
    <h4>Still looking for an answer?</h4>
    <div class="lfa--actions">
      <a href="/community/questions/new?tags=Django%2CApplications%2CReact%2CUbuntu+18.04"
         class="lfa--action-box">
        <span class="icon icon-look-for-answer-question"></span>
        Ask a question
      </a>
      <a href="javascript:void(0)" class="lfa--action-box use-universal-search-js">
        <span class="icon icon-look-for-answer-search-thin"></span>
        Search for more help
      </a>
    </div>
  </div>
</div>

</div>

<div class="content-comments">
  <div class="section-content">
    <div class="tutorial commentable" id="tutorial_3346">

  <div class="comments-header">
    <h4 class="comments-count">
        <span>0 Comments</span>
    </h4>
  </div>

    <div class="response response-form no-avatar no-comments">
  <div class="js-display-on-error flash error hidden"></div>


  <form class="content-form disabled-form" id="new_comment" action="/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru/comments" accept-charset="UTF-8" data-remote="true" method="post"><input name="utf8" type="hidden" value="&#x2713;" />

    <textarea name="comment[content]" id="comment_content" placeholder="Leave a comment..." class="js-comment-content tutorial-comment-field" data-markdown="true">
</textarea>

      <div class="log-in-notice "><a href="/community/auth/digitalocean">Sign In to Comment</a></div>

    <div class='clearfix'></div>
</form>
</div>


  <div class="comments">
    <ul class="response-list">
    </ul>

  </div>

  <div class='load-more-container'></div>
</div>


  </div>
</div>

<div class="creative-commons">
  <a class="creative-commons-image" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img rel="license" alt="Creative Commons License" src="/assets/community/creativecommons-027bb7f065acf05ba3c0f84a040d2da641648afc81daa6ff5570301d4998bbb6.png" /></a>
  <div class="license-text">This work is licensed under a <a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.</div>
</div>









        <div class="clearfix"></div>
      </div>

      
      <footer>
        <section>
            <a href="https://www.digitalocean.com/community/pages/write-for-digitalocean" class="panel_with_image">
            <div class="photo_wrap">
              <img class="photo" src="https://images.prismic.io/digitalocean/70910e9fdeb57be46aaa209ce8d9b4dc8e117fab_w4do2.jpg?auto=compress,format" alt="">
            </div>
            <span class="heading">Become a contributor</span>
            <p>
                You get paid; we donate to tech nonprofits.
            </p>
          </a>
            <a href="https://www.digitalocean.com/community/newsletter" class="panel_with_image">
            <div class="photo_wrap">
              <img class="photo" src="https://images.prismic.io/digitalocean/ca12c951cc76f33037f3384bba9942545d160d82_iaan_illo.jpg?auto=compress,format" alt="">
            </div>
            <span class="heading">Get our biweekly newsletter</span>
            <p>
                Sign up for Infrastructure as a Newsletter.
            </p>
          </a>
            <a href="https://www.digitalocean.com/community/pages/hub-for-good" class="panel_with_image">
            <div class="photo_wrap">
              <img class="photo" src="https://images.prismic.io/digitalocean/21ab4275-bcf3-42ac-b148-6f81d516ca1d_Twitter_graphic.png?auto=compress,format&amp;rect=0,61,1024,387&amp;w=370&amp;h=140" alt="">
            </div>
            <span class="heading">Hub for Good</span>
            <p>
                Working on improving health and education, reducing inequality, and spurring economic growth? We&#39;d like to help.
            </p>
          </a>
      </section>
      <section class="slim ">
        <span class="heading">Featured on Community</span>
            <a href="https://www.digitalocean.com/community/curriculums/kubernetes-for-full-stack-developers">Kubernetes Course</a>
            <a href="https://www.digitalocean.com/community/tutorial_series/how-to-code-in-python-3">Learn Python 3</a>
            <a href="https://www.digitalocean.com/community/tutorials/machine-learning-projects-python-a-digitalocean-ebook">Machine Learning in Python</a>
            <a href="https://www.digitalocean.com/community/tutorials/how-to-write-your-first-program-in-go">Getting started with Go</a>
            <a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-kubernetes">Intro to Kubernetes</a>
        <hr>
        <span class="heading">DigitalOcean Products</span>
            <a href="https://www.digitalocean.com/products/droplets/">Droplets</a>
            <a href="https://www.digitalocean.com/products/managed-databases/">Managed Databases</a>
            <a href="https://www.digitalocean.com/products/kubernetes/">Managed Kubernetes</a>
            <a href="https://www.digitalocean.com/products/spaces/">Spaces Object Storage</a>
            <a href="https://marketplace.digitalocean.com/">Marketplace</a>
      </section>
        <section class="product">
          <a class="copy" href="/products">
            <h3>Welcome to the developer cloud</h3>
            <p>DigitalOcean makes it simple to launch in the cloud and scale up as you grow – whether you’re running one virtual machine or ten thousand.</p>
            <span class="link_text">Learn More</span>
          </a>
          <div class="feature">
            <a class="img_wrap" href="/products">
              <img class="photo" src="https://images.prismic.io/digitalocean/95c1215227aa7f39f2bd23076de28feb969741c7_cloud.digitalocean.com_projects_63f9252f-652b-4645-9c0c-bee96f2bc503_resources_ic0ce81-2.png?auto=compress,format" alt="DigitalOcean Cloud Control Panel">
            </a>
          </div>
        </section>
        <section class="dark">
          <div class="vlist grow">
            <a href="https://www.digitalocean.com">
              <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 50 50">
                <title>DigitalOcean Homepage</title>
                <g fill="#0080FF" fill-rule="evenodd">
                  <path
                    d="M24.9153 50v-9.661c10.226 0 18.1638-10.1413 14.2372-20.904-1.4406-3.983-4.6327-7.1751-8.6158-8.6158C19.774 6.921 9.6327 14.8305 9.6327 25.0565H0C0 8.7571 15.7627-3.9548 32.8531 1.3842c7.4576 2.3446 13.418 8.2768 15.7345 15.7344C53.9266 34.2373 41.2429 50 24.9153 50">
                  </path>
                  <path
                    d="M15.339 40.3672h9.6045v-9.6045H15.339zM7.9379 47.7684h7.401v-7.4012H7.938zM1.7514 40.3672H7.938v-6.1864H1.7514z">
                  </path>
                </g>
              </svg>
            </a>
            <br><br>
            © <script type="text/javascript">
              document.write(new Date().getFullYear());

            </script> DigitalOcean, LLC. All rights reserved.
          </div>

              <div class="vlist">
                <span class="heading">Company</span>
                <ul>
                    <li>
                      <a href="https://www.digitalocean.com/about/">About</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/about/leadership/">Leadership</a>
                    </li>
                    <li>
                      <a href="https://blog.digitalocean.com/">Blog</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/careers/">Careers</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/partners/">Partners</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/referral-program/">Referral Program</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/press/">Press</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/legal/">Legal &amp; Security</a>
                    </li>
                </ul>
              </div>
              <div class="vlist">
                <span class="heading">Products</span>
                <ul>
                    <li>
                      <a href="https://www.digitalocean.com/products/">Products Overview</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/pricing/">Pricing</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/products/droplets/">Droplets</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/products/kubernetes/">Kubernetes</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/products/managed-databases/">Managed Databases</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/products/spaces/">Spaces</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/products/marketplace/">Marketplace</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/products/load-balancer/">Load Balancers</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/products/block-storage/">Block Storage</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/products/tools-and-integrations/">Tools &amp; Integrations</a>
                    </li>
                    <li>
                      <a href="https://developers.digitalocean.com/documentation/">API</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/docs">Documentation</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/docs/release-notes/">Release Notes</a>
                    </li>
                </ul>
              </div>
              <div class="vlist">
                <span class="heading">Community</span>
                <ul>
                    <li>
                      <a href="https://www.digitalocean.com/community/tutorials">Tutorials</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/community/questions">Q&amp;A</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/community/tools">Tools and Integrations</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/community/tags">Tags</a>
                    </li>
                    <li>
                      <a href="https://ideas.digitalocean.com/">Product Ideas</a>
                    </li>
                    <li>
                      <a href="https://www.meetup.com/pro/digitalocean/?utm_source=do_www">Meetups</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/write-for-donations/">Write for DOnations</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/droplets-for-demos/">Droplets for Demos</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/hatch/">Hatch Startup Program</a>
                    </li>
                    <li>
                      <a href="http://store.digitalocean.com/">Shop Swag</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/research/">Research Program</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/open-source/">Open Source</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/community/pages/code-of-conduct">Code of Conduct</a>
                    </li>
                </ul>
              </div>
              <div class="vlist">
                <span class="heading">Contact</span>
                <ul>
                    <li>
                      <a href="https://www.digitalocean.com/support/start/">Get Support</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/docs/getting-started/faq/">Trouble Signing In?</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/company/contact/sales/">Sales</a>
                    </li>
                    <li>
                      <a href="https://www.digitalocean.com/company/contact/#abuse">Report Abuse</a>
                    </li>
                    <li>
                      <a href="https://status.digitalocean.com/">System Status</a>
                    </li>
                </ul>
              </div>
        </section>
      </footer>


      <div id='sign-in-modal' class='modal fade mini-modal' style="display: none;">
  <div class='modal-dialog'>
    <div class='modal-content'>
      <div class='modal-header'>
        <h1>Almost there!</h1>
        <a class='close-button' data-dismiss='modal' aria-label="close"  href=''><span class='icon icon-close-light'></span></a>
      </div>
      <div class='modal-body'>
        <div class='sign-in-message'>Sign in to your Community account or create a new one below.</div>
        <div class='sign-in-modal-actions'>
          <a class="sign-in-link button blue-button" data-default-url="/community/auth/digitalocean" href="/community/auth/digitalocean">Sign In</a>
          <a class="sign-up-link button blue-button" data-default-url="/community/auth/digitalocean?display=sessionless+register" href="/community/auth/digitalocean?display=sessionless+register">Sign Up</a>
        </div>
      </div>
    </div>
  </div>
</div>


      <script>
    $(function() {
      window.initTranslationFeedbackActions(3346);
    });
  </script>
  <script>
    $(function() {
      window.initHelpfulnessActions(3346, '/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru/flag');
    });
  </script>

  <script>
    $(function() {
      if (!!window.init_sharing) {
        window.init_sharing();
      }
      new window.NewsletterSignup();
      new window.GrowableMarkdown({ target: '[data-growable-markdown]' });

      createTranslationSelection({
        $translation_language: $('#translation_language'),
      });
    });
  </script>
  <script type="application/ld+json">
  {"@context":"http://schema.org","@type":"Article","name":"Создание с помощью Django и React современного веб-приложения для управления данными клиентов в Ubuntu 18.04","headline":"Создание с помощью Django и React современного веб-приложения для управления данными клиентов в Ubuntu 18.04","alternativeHeadline":"Создание с помощью Django и React современного веб-приложения для управления данными клиентов в Ubuntu 18.04","description":"Автор выбрал организацию Open Sourcing Mental Illness Ltd для получения пожертвований в рамках программы Write for DOnations. Для подключения к Интернету и просмотра сайтов…","keywords":"Django,Applications,October 2018,React,Ubuntu 18.04,w4do,DO-Editorial","url":"https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru","mainEntityOfPage":{"@type":"WebPage","@id":"https://www.digitalocean.com/community/tutorials/how-to-build-a-modern-web-application-to-manage-customer-information-with-django-and-react-on-ubuntu-18-04-ru"},"dateModified":"2020-01-07T18:27:22Z","inLanguage":"ru","accessMode":"textual","accessModeSufficient":"textual","isAccessibleForFree":true,"license":"https://creativecommons.org/licenses/by-nc-sa/4.0/","publishingPrinciples":"https://www.digitalocean.com/community/tutorials/technical-recommendations-and-best-practices-for-digitalocean-s-tutorials","author":[{"@type":"Person","name":"Ahmed Bouchefra","@id":"https://www.digitalocean.com/community/users/mrnerd"}],"datePublished":"2020-01-07T18:27:22Z","editor":{"@type":"Person","name":"Kathleen Juell","@id":"katjuell"},"image":{"@type":"ImageObject","url":"https://www.digitalocean.com/assets/community/illustrations/DigitalOcean_Community-e00e73a18df20667c3117725e727f3ade330204dff619ad8153050ded7341627.jpg","height":375,"width":750},"interactionStatistic":[{"@type":"InteractionCounter","interactionType":"http://schema.org/LikeAction","userInteractionCount":"17"},{"@type":"InteractionCounter","interactionType":"http://schema.org/CommentAction","userInteractionCount":"0"}],"sourceOrganization":{"@type":"Organization","name":"DigitalOcean Community","url":"https://www.digitalocean.com/community"},"publisher":{"@type":"Organization","name":"DigitalOcean","url":"https://www.digitalocean.com","logo":{"@type":"ImageObject","url":"https://assets.digitalocean.com/logos/DO_Logo_horizontal_blue.png","width":351,"height":60}}}
</script>

  <script type="text/javascript">
    $(function() {
      $('.use-universal-search-js').on('click', function () {
        $('#q').trigger('click');
      });
    });

    window.loadUniversalSearchScript( function () {
      var search = new UniversalSearch({
        element_id: 'q',
        search_on_slash: true,
        primary_list: ['quicknav', 'community_consolidated'],
        secondary_list: ['alldocs', 'marketplace'],
        algolia_app_id: "6ZHEUVKJ88",
        algolia_public_key: "c5470567eae7fa1177d43222e18ba086"
      });
      search.start();
    });
  </script>


    
  </body>
</html>
